Specification([Signature([Constructors([OpDecl("Nil",ConstType(Sort("List",[SortVar("a")]))),OpDecl("Cons",FunType([ConstType(SortVar("a")),ConstType(Sort("List",[SortVar("a")]))],ConstType(Sort("List",[SortVar("a")])))),OpDecl("Conc",FunType([ConstType(Sort("List",[SortVar("a")])),ConstType(Sort("List",[SortVar("a")]))],ConstType(Sort("List",[SortVar("a")])))),OpDeclInj(ConstType(SortTuple([]))),OpDeclInj(FunType([ConstType(SortVar("a"))],ConstType(SortTuple([SortVar("a")])))),OpDeclInj(FunType([ConstType(SortVar("a")),ConstType(SortVar("b"))],ConstType(SortTuple([SortVar("a"),SortVar("b")])))),OpDeclInj(FunType([ConstType(SortVar("a")),ConstType(SortVar("b")),ConstType(SortVar("c"))],ConstType(SortTuple([SortVar("a"),SortVar("b"),SortVar("c")])))),OpDecl("None",ConstType(Sort("Option",[SortVar("a")]))),OpDecl("Some",FunType([ConstType(SortVar("a"))],ConstType(Sort("Option",[SortVar("a")])))),OpDecl("Program",FunType([ConstType(Sort("List",[SortNoArgs("Statement")]))],ConstType(SortNoArgs("Start")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("ID")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("INT")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("FLOAT")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("STRING")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("StringChar")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("BackSlashChar")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("CommentChar")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("InsideComment")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("NewLineEOF")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("EOF")))),OpDecl("Parenthesised",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("Property",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("ID"))],ConstType(SortNoArgs("Expression")))),OpDecl("Call",FunType([ConstType(SortNoArgs("Expression")),ConstType(Sort("List",[SortNoArgs("Expression")]))],ConstType(SortNoArgs("Expression")))),OpDecl("IntegerLiteral",FunType([ConstType(SortNoArgs("INT"))],ConstType(SortNoArgs("Expression")))),OpDecl("FloatLiteral",FunType([ConstType(SortNoArgs("FLOAT"))],ConstType(SortNoArgs("Expression")))),OpDecl("True",ConstType(SortNoArgs("Expression"))),OpDecl("False",ConstType(SortNoArgs("Expression"))),OpDecl("Null",ConstType(SortNoArgs("Expression"))),OpDecl("Undefined",ConstType(SortNoArgs("Expression"))),OpDecl("Identifier",FunType([ConstType(SortNoArgs("ID"))],ConstType(SortNoArgs("Expression")))),OpDecl("String",FunType([ConstType(SortNoArgs("STRING"))],ConstType(SortNoArgs("Expression")))),OpDecl("Addition",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("Substraction",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("Multiplication",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("Division",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("Greater",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("Lower",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("GreaterEquals",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("LowerEquals",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("Equals",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("NotEquals",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("And",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("Or",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("AnonFunction",FunType([ConstType(Sort("List",[SortNoArgs("Parameter")])),ConstType(Sort("List",[SortNoArgs("Statement")]))],ConstType(SortNoArgs("Expression")))),OpDecl("Object",FunType([ConstType(Sort("List",[SortNoArgs("KeyValue")]))],ConstType(SortNoArgs("Expression")))),OpDecl("KeyValue",FunType([ConstType(SortNoArgs("ID")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("KeyValue")))),OpDecl("Array",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("ArrayLiteral",FunType([ConstType(Sort("List",[SortNoArgs("Expression")]))],ConstType(SortNoArgs("Expression")))),OpDecl("parameter",FunType([ConstType(SortNoArgs("ID"))],ConstType(SortNoArgs("Parameter")))),OpDecl("expStmt",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Statement")))),OpDecl("varDecl",FunType([ConstType(SortNoArgs("ID")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Statement")))),OpDecl("constDecl",FunType([ConstType(SortNoArgs("ID")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Statement")))),OpDecl("assignment",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Statement")))),OpDecl("for",FunType([ConstType(SortNoArgs("Statement")),ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Expression")),ConstType(Sort("List",[SortNoArgs("Statement")]))],ConstType(SortNoArgs("Statement")))),OpDecl("while",FunType([ConstType(SortNoArgs("Expression")),ConstType(Sort("List",[SortNoArgs("Statement")]))],ConstType(SortNoArgs("Statement")))),OpDecl("return",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("MethodDecl"))],ConstType(SortNoArgs("Statement")))),OpDecl("try",FunType([ConstType(Sort("List",[SortNoArgs("Statement")])),ConstType(SortNoArgs("CatchFinally"))],ConstType(SortNoArgs("Statement")))),OpDecl("catch",FunType([ConstType(SortNoArgs("Expression")),ConstType(Sort("List",[SortNoArgs("Statement")])),ConstType(Sort("Option",[SortNoArgs("CatchFinally")]))],ConstType(SortNoArgs("CatchFinally")))),OpDecl("finally",FunType([ConstType(Sort("List",[SortNoArgs("Statement")]))],ConstType(SortNoArgs("CatchFinally")))),OpDecl("method",FunType([ConstType(SortNoArgs("ID")),ConstType(Sort("List",[SortNoArgs("Parameter")])),ConstType(Sort("List",[SortNoArgs("Statement")]))],ConstType(SortNoArgs("MethodDecl")))),OpDecl("ReceiveStmt",FunType([ConstType(SortNoArgs("Operand")),ConstType(SortNoArgs("Operand"))],ConstType(SortNoArgs("Statement")))),OpDecl("SubstitutedExp",FunType([ConstType(SortNoArgs("Operand")),ConstType(Sort("List",[SortNoArgs("Statement")])),ConstType(SortNoArgs("StringLit"))],ConstType(SortNoArgs("UnaryExpr")))),OpDecl("SubstitudedCall",FunType([ConstType(SortNoArgs("Exp")),ConstType(SortNoArgs("Exp")),ConstType(SortNoArgs("StringLit"))],ConstType(SortNoArgs("Exp")))),OpDecl("AddedJsStmt",FunType([ConstType(SortNoArgs("Statement"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("ConstDecl"))],ConstType(SortNoArgs("Declaration")))),OpDeclInj(FunType([ConstType(SortNoArgs("TypeDecl"))],ConstType(SortNoArgs("Declaration")))),OpDeclInj(FunType([ConstType(SortNoArgs("VarDecl"))],ConstType(SortNoArgs("Declaration")))),OpDeclInj(FunType([ConstType(SortNoArgs("Declaration"))],ConstType(SortNoArgs("TopLevelDecl")))),OpDeclInj(FunType([ConstType(SortNoArgs("FunctionDecl"))],ConstType(SortNoArgs("TopLevelDecl")))),OpDeclInj(FunType([ConstType(SortNoArgs("MethodDecl"))],ConstType(SortNoArgs("TopLevelDecl")))),OpDecl("ConstDecl",FunType([ConstType(SortNoArgs("ConstSpec"))],ConstType(SortNoArgs("ConstDecl")))),OpDecl("ConstSpecTyped",FunType([ConstType(SortNoArgs("IdentifierList")),ConstType(SortNoArgs("Type")),ConstType(Sort("Option",[SortNoArgs("ConstDeclAssign")]))],ConstType(SortNoArgs("ConstSpec")))),OpDecl("ConstSpec",FunType([ConstType(SortNoArgs("IdentifierList")),ConstType(SortNoArgs("ConstDeclAssign"))],ConstType(SortNoArgs("ConstSpec")))),OpDecl("ConstDeclAssign",FunType([ConstType(SortNoArgs("ExpressionList"))],ConstType(SortNoArgs("ConstDeclAssign")))),OpDecl("IdentifierList",FunType([ConstType(Sort("List",[SortNoArgs("Identifier")]))],ConstType(SortNoArgs("IdentifierList")))),OpDecl("ExpressionList",FunType([ConstType(Sort("List",[SortNoArgs("Expression")]))],ConstType(SortNoArgs("ExpressionList")))),OpDecl("TypeDecl",FunType([ConstType(SortNoArgs("TypeSpec"))],ConstType(SortNoArgs("TypeDecl")))),OpDecl("TypeDecls",FunType([ConstType(Sort("List",[SortNoArgs("TypeSpec")]))],ConstType(SortNoArgs("TypeDecl")))),OpDecl("TypeSpec",FunType([ConstType(SortNoArgs("Identifier")),ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("TypeSpec")))),OpDecl("VarDecl",FunType([ConstType(SortNoArgs("VarSpec"))],ConstType(SortNoArgs("VarDecl")))),OpDecl("VarSpecTyped",FunType([ConstType(SortNoArgs("IdentifierList")),ConstType(SortNoArgs("Type")),ConstType(Sort("Option",[SortNoArgs("VarDeclAssign")]))],ConstType(SortNoArgs("VarSpec")))),OpDecl("VarSpec",FunType([ConstType(SortNoArgs("IdentifierList")),ConstType(SortNoArgs("VarDeclAssign"))],ConstType(SortNoArgs("VarSpec")))),OpDecl("VarDeclAssign",FunType([ConstType(SortNoArgs("ExpressionList"))],ConstType(SortNoArgs("VarDeclAssign")))),OpDecl("ShortVarDecl",FunType([ConstType(SortNoArgs("IdentifierList")),ConstType(SortNoArgs("ShortVarDeclAssign"))],ConstType(SortNoArgs("ShortVarDecl")))),OpDecl("ShortVarDeclAssign",FunType([ConstType(SortNoArgs("ExpressionList"))],ConstType(SortNoArgs("ShortVarDeclAssign")))),OpDecl("FunctionDecl",FunType([ConstType(SortNoArgs("FunctionName")),ConstType(SortNoArgs("FunOrSig"))],ConstType(SortNoArgs("FunctionDecl")))),OpDecl("FunctionName",FunType([ConstType(SortNoArgs("ID"))],ConstType(SortNoArgs("FunctionName")))),OpDeclInj(FunType([ConstType(SortNoArgs("Function"))],ConstType(SortNoArgs("FunOrSig")))),OpDeclInj(FunType([ConstType(SortNoArgs("FunctionSignature"))],ConstType(SortNoArgs("FunOrSig")))),OpDecl("Function",FunType([ConstType(SortNoArgs("Signature")),ConstType(SortNoArgs("FunctionBody"))],ConstType(SortNoArgs("Function")))),OpDecl("FunctionSignature",FunType([ConstType(SortNoArgs("Signature"))],ConstType(SortNoArgs("FunctionSignature")))),OpDecl("FunctionBody",FunType([ConstType(SortNoArgs("Block"))],ConstType(SortNoArgs("FunctionBody")))),OpDecl("MethodDecl",FunType([ConstType(SortNoArgs("Parameters")),ConstType(SortNoArgs("MethodName")),ConstType(SortNoArgs("FunOrSig"))],ConstType(SortNoArgs("MethodDecl")))),OpDecl("MethodName",FunType([ConstType(SortNoArgs("Identifier"))],ConstType(SortNoArgs("MethodName")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("QualifiedIdent")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("BinaryOp")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("RelOp")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("AddOp")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("MulOp")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("UnaryOp")))),OpDecl("Literal",FunType([ConstType(SortNoArgs("Literal"))],ConstType(SortNoArgs("Operand")))),OpDecl("OperandName",FunType([ConstType(SortNoArgs("OperandName"))],ConstType(SortNoArgs("Operand")))),OpDecl("MethodExpr",FunType([ConstType(SortNoArgs("MethodExpr"))],ConstType(SortNoArgs("Operand")))),OpDecl("GroupedExpression",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Operand")))),OpDeclInj(FunType([ConstType(SortNoArgs("BasicLit"))],ConstType(SortNoArgs("Literal")))),OpDeclInj(FunType([ConstType(SortNoArgs("CompositeLit"))],ConstType(SortNoArgs("Literal")))),OpDeclInj(FunType([ConstType(SortNoArgs("FunctionLit"))],ConstType(SortNoArgs("Literal")))),OpDecl("IntLit",FunType([ConstType(SortNoArgs("IntLit"))],ConstType(SortNoArgs("BasicLit")))),OpDecl("StringLit",FunType([ConstType(SortNoArgs("StringLit"))],ConstType(SortNoArgs("BasicLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("Identifier"))],ConstType(SortNoArgs("OperandName")))),OpDeclInj(FunType([ConstType(SortNoArgs("QualifiedIdent"))],ConstType(SortNoArgs("OperandName")))),OpDecl("CompositeLit",FunType([ConstType(SortNoArgs("LiteralType")),ConstType(SortNoArgs("LiteralValue"))],ConstType(SortNoArgs("CompositeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("ArrayType"))],ConstType(SortNoArgs("LiteralType")))),OpDeclInj(FunType([ConstType(SortNoArgs("TypeName"))],ConstType(SortNoArgs("LiteralType")))),OpDecl("LiteralValue",FunType([ConstType(Sort("Option",[SortNoArgs("ElementList")]))],ConstType(SortNoArgs("LiteralValue")))),OpDecl("ElementList",FunType([ConstType(Sort("List",[SortNoArgs("KeyedElement")]))],ConstType(SortNoArgs("ElementList")))),OpDecl("SingleElem",FunType([ConstType(SortNoArgs("Element"))],ConstType(SortNoArgs("KeyedElement")))),OpDecl("KeyValPair",FunType([ConstType(SortNoArgs("Key")),ConstType(SortNoArgs("Element"))],ConstType(SortNoArgs("KeyedElement")))),OpDeclInj(FunType([ConstType(SortNoArgs("Identifier"))],ConstType(SortNoArgs("Key")))),OpDeclInj(FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Element")))),OpDeclInj(FunType([ConstType(SortNoArgs("LiteralValue"))],ConstType(SortNoArgs("Element")))),OpDecl("FunctionLit",FunType([ConstType(SortNoArgs("Function"))],ConstType(SortNoArgs("FunctionLit")))),OpDecl("PrimaryExprArguments",FunType([ConstType(SortNoArgs("PrimaryExpr")),ConstType(SortNoArgs("Arguments"))],ConstType(SortNoArgs("PrimaryExpr")))),OpDecl("PrimaryExprIndex",FunType([ConstType(SortNoArgs("PrimaryExpr")),ConstType(SortNoArgs("Index"))],ConstType(SortNoArgs("PrimaryExpr")))),OpDecl("PrimaryExprSlice",FunType([ConstType(SortNoArgs("PrimaryExpr")),ConstType(SortNoArgs("Slice"))],ConstType(SortNoArgs("PrimaryExpr")))),OpDecl("PrimaryExprSelector",FunType([ConstType(SortNoArgs("PrimaryExpr")),ConstType(SortNoArgs("Selector"))],ConstType(SortNoArgs("PrimaryExpr")))),OpDecl("Operand",FunType([ConstType(SortNoArgs("Operand"))],ConstType(SortNoArgs("PrimaryExpr")))),OpDecl("Index",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Index")))),OpDecl("Slice",FunType([ConstType(Sort("Option",[SortNoArgs("Expression")])),ConstType(Sort("Option",[SortNoArgs("Expression")]))],ConstType(SortNoArgs("Slice")))),OpDecl("Arguments",FunType([ConstType(Sort("Option",[SortNoArgs("ExpressionList")]))],ConstType(SortNoArgs("Arguments")))),OpDecl("TypeArg",FunType([ConstType(SortNoArgs("TypeLit"))],ConstType(SortNoArgs("Arguments")))),OpDecl("TypeArgWithList",FunType([ConstType(SortNoArgs("TypeLit")),ConstType(SortNoArgs("ExpressionList"))],ConstType(SortNoArgs("Arguments")))),OpDecl("Selector",FunType([ConstType(SortNoArgs("Identifier"))],ConstType(SortNoArgs("Selector")))),OpDecl("MethodExpr",FunType([ConstType(SortNoArgs("ReceiverType")),ConstType(SortNoArgs("MethodName"))],ConstType(SortNoArgs("MethodExpr")))),OpDecl("TypeName",FunType([ConstType(SortNoArgs("TypeName"))],ConstType(SortNoArgs("ReceiverType")))),OpDecl("Asterisk",FunType([ConstType(SortNoArgs("TypeName"))],ConstType(SortNoArgs("ReceiverType")))),OpDecl("Brackets",FunType([ConstType(SortNoArgs("ReceiverType"))],ConstType(SortNoArgs("ReceiverType")))),OpDecl("UnaryExpr",FunType([ConstType(SortNoArgs("UnaryExpr"))],ConstType(SortNoArgs("Expression")))),OpDecl("BinaryExpr",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("BinaryOp")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Expression")))),OpDecl("PrimaryExpr",FunType([ConstType(SortNoArgs("PrimaryExpr"))],ConstType(SortNoArgs("UnaryExpr")))),OpDecl("UnaryExpr",FunType([ConstType(SortNoArgs("UnaryOp")),ConstType(SortNoArgs("UnaryExpr"))],ConstType(SortNoArgs("UnaryExpr")))),OpDecl("Conversion",FunType([ConstType(SortNoArgs("Type")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Conversion")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("LetterUnicodeDigit")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Identifier")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("IntLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("DecimalLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("OctalLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("HexX")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("HexLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("StringLit")))),OpDecl("SourceFile",FunType([ConstType(SortNoArgs("PackageClause")),ConstType(Sort("List",[SortNoArgs("ImportDecl")])),ConstType(Sort("List",[SortNoArgs("TopLevelDecl")]))],ConstType(SortNoArgs("SourceFile")))),OpDecl("PackageClause",FunType([ConstType(SortNoArgs("PackageName"))],ConstType(SortNoArgs("PackageClause")))),OpDecl("PackageName",FunType([ConstType(SortNoArgs("Identifier"))],ConstType(SortNoArgs("PackageName")))),OpDecl("SingleImportDecl",FunType([ConstType(SortNoArgs("ImportSpec"))],ConstType(SortNoArgs("ImportDecl")))),OpDecl("MultiImportDecl",FunType([ConstType(Sort("List",[SortNoArgs("ImportSpec")]))],ConstType(SortNoArgs("ImportDecl")))),OpDecl("ImportSpec",FunType([ConstType(SortNoArgs("PackageSelector")),ConstType(SortNoArgs("ImportPath"))],ConstType(SortNoArgs("ImportSpec")))),OpDecl("SubSet",FunType([ConstType(SortNoArgs("Identifier"))],ConstType(SortNoArgs("PackageSelector")))),OpDecl("All",ConstType(SortNoArgs("PackageSelector"))),OpDecl("ImportPath",FunType([ConstType(SortNoArgs("StringLit"))],ConstType(SortNoArgs("ImportPath")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Newline")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("UnicodeChar")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("UnicodeLetter")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("UnicodeDigit")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("Letter")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("DecimalDigit")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("OctalDigit")))),OpDeclInj(FunType([ConstType(SortNoArgs("String"))],ConstType(SortNoArgs("HexDigit")))),OpDecl("Block",FunType([ConstType(SortNoArgs("StatementList"))],ConstType(SortNoArgs("Block")))),OpDecl("StatementList",FunType([ConstType(Sort("List",[SortNoArgs("StatementLine")]))],ConstType(SortNoArgs("StatementList")))),OpDecl("StatementLine",FunType([ConstType(SortNoArgs("Statement"))],ConstType(SortNoArgs("StatementLine")))),OpDeclInj(FunType([ConstType(SortNoArgs("Declaration"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("LabeledStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("SimpleStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("GoStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("ReturnStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("BreakStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("ContinueStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("GotoStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("FallthroughStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("Block"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("IfStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("SwitchStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("SelectStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("ForStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("DeferStmt"))],ConstType(SortNoArgs("Statement")))),OpDeclInj(FunType([ConstType(SortNoArgs("EmptyStmt"))],ConstType(SortNoArgs("SimpleStmt")))),OpDeclInj(FunType([ConstType(SortNoArgs("ExpressionStmt"))],ConstType(SortNoArgs("SimpleStmt")))),OpDeclInj(FunType([ConstType(SortNoArgs("SendStmt"))],ConstType(SortNoArgs("SimpleStmt")))),OpDeclInj(FunType([ConstType(SortNoArgs("IncDecStmt"))],ConstType(SortNoArgs("SimpleStmt")))),OpDeclInj(FunType([ConstType(SortNoArgs("Assignment"))],ConstType(SortNoArgs("SimpleStmt")))),OpDeclInj(FunType([ConstType(SortNoArgs("ShortVarDecl"))],ConstType(SortNoArgs("SimpleStmt")))),OpDecl("EmptyStmt",ConstType(SortNoArgs("EmptyStmt"))),OpDecl("LabeledStmt",FunType([ConstType(SortNoArgs("Label")),ConstType(SortNoArgs("Statement"))],ConstType(SortNoArgs("LabeledStmt")))),OpDecl("Label",FunType([ConstType(SortNoArgs("ID"))],ConstType(SortNoArgs("Label")))),OpDecl("ExpressionStmt",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("ExpressionStmt")))),OpDecl("SendStmt",FunType([ConstType(SortNoArgs("Channel")),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("SendStmt")))),OpDecl("Channel",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Channel")))),OpDecl("IncStmt",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("IncDecStmt")))),OpDecl("DecStmt",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("IncDecStmt")))),OpDecl("Assignment",FunType([ConstType(SortNoArgs("ExpressionList")),ConstType(SortNoArgs("AssignOp")),ConstType(SortNoArgs("ExpressionList"))],ConstType(SortNoArgs("Assignment")))),OpDecl("AssignAddOp",FunType([ConstType(SortNoArgs("AddOp"))],ConstType(SortNoArgs("AssignOp")))),OpDecl("AssignMulOp",FunType([ConstType(SortNoArgs("MulOp"))],ConstType(SortNoArgs("AssignOp")))),OpDecl("AssignEquals",ConstType(SortNoArgs("AssignOp"))),OpDecl("IfStmt",FunType([ConstType(Sort("Option",[SortNoArgs("IfConditionStmt")])),ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Block")),ConstType(Sort("Option",[SortNoArgs("ElseStmt")]))],ConstType(SortNoArgs("IfStmt")))),OpDecl("IfConditionStmt",FunType([ConstType(SortNoArgs("SimpleStmt"))],ConstType(SortNoArgs("IfConditionStmt")))),OpDecl("ElseIfStmt",FunType([ConstType(SortNoArgs("IfStmt"))],ConstType(SortNoArgs("ElseStmt")))),OpDecl("ElseBlockStmt",FunType([ConstType(SortNoArgs("Block"))],ConstType(SortNoArgs("ElseStmt")))),OpDecl("SwitchStmt",ConstType(SortNoArgs("SwitchStmt"))),OpDecl("ForStmt",FunType([ConstType(SortNoArgs("ForCond")),ConstType(SortNoArgs("Block"))],ConstType(SortNoArgs("ForStmt")))),OpDecl("Condition",FunType([ConstType(SortNoArgs("Condition"))],ConstType(SortNoArgs("ForCond")))),OpDecl("ForClause",FunType([ConstType(SortNoArgs("ForClause"))],ConstType(SortNoArgs("ForCond")))),OpDecl("RangeClause",FunType([ConstType(SortNoArgs("RangeClause"))],ConstType(SortNoArgs("ForCond")))),OpDeclInj(FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("Condition")))),OpDecl("ForClause",FunType([ConstType(Sort("Option",[SortNoArgs("InitStmt")])),ConstType(Sort("Option",[SortNoArgs("Condition")])),ConstType(Sort("Option",[SortNoArgs("PostStmt")]))],ConstType(SortNoArgs("ForClause")))),OpDeclInj(FunType([ConstType(SortNoArgs("SimpleStmt"))],ConstType(SortNoArgs("InitStmt")))),OpDeclInj(FunType([ConstType(SortNoArgs("SimpleStmt"))],ConstType(SortNoArgs("PostStmt")))),OpDecl("RangeClause",FunType([ConstType(Sort("Option",[SortNoArgs("RangeExpIdList")])),ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("RangeClause")))),OpDecl("ExpressionList",FunType([ConstType(SortNoArgs("ExpressionList"))],ConstType(SortNoArgs("RangeExpIdList")))),OpDecl("IdentifierList",FunType([ConstType(SortNoArgs("IdentifierList"))],ConstType(SortNoArgs("RangeExpIdList")))),OpDecl("GoStmt",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("GoStmt")))),OpDecl("SelectStmt",ConstType(SortNoArgs("SelectStmt"))),OpDecl("ReturnStmt",FunType([ConstType(Sort("Option",[SortNoArgs("ExpressionList")]))],ConstType(SortNoArgs("ReturnStmt")))),OpDecl("BreakStmt",FunType([ConstType(Sort("Option",[SortNoArgs("Label")]))],ConstType(SortNoArgs("BreakStmt")))),OpDecl("ContinueStmt",FunType([ConstType(Sort("Option",[SortNoArgs("Label")]))],ConstType(SortNoArgs("ContinueStmt")))),OpDecl("GotoStmt",FunType([ConstType(Sort("Option",[SortNoArgs("Label")]))],ConstType(SortNoArgs("GotoStmt")))),OpDecl("FallthroughStmt",ConstType(SortNoArgs("FallthroughStmt"))),OpDecl("DeferStmt",FunType([ConstType(SortNoArgs("Expression"))],ConstType(SortNoArgs("DeferStmt")))),OpDeclInj(FunType([ConstType(SortNoArgs("TypeLit"))],ConstType(SortNoArgs("Type")))),OpDeclInj(FunType([ConstType(SortNoArgs("TypeName"))],ConstType(SortNoArgs("Type")))),OpDeclInj(FunType([ConstType(SortNoArgs("TypeGrouped"))],ConstType(SortNoArgs("Type")))),OpDeclInj(FunType([ConstType(SortNoArgs("Identifier"))],ConstType(SortNoArgs("TypeName")))),OpDeclInj(FunType([ConstType(SortNoArgs("BooleanType"))],ConstType(SortNoArgs("TypeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("NumericType"))],ConstType(SortNoArgs("TypeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("StringType"))],ConstType(SortNoArgs("TypeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("ArrayType"))],ConstType(SortNoArgs("TypeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("StructType"))],ConstType(SortNoArgs("TypeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("PointerType"))],ConstType(SortNoArgs("TypeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("FunctionType"))],ConstType(SortNoArgs("TypeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("InterfaceType"))],ConstType(SortNoArgs("TypeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("SliceType"))],ConstType(SortNoArgs("TypeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("MapType"))],ConstType(SortNoArgs("TypeLit")))),OpDeclInj(FunType([ConstType(SortNoArgs("ChannelType"))],ConstType(SortNoArgs("TypeLit")))),OpDecl("TypeGrouped",FunType([ConstType(Sort("List",[SortNoArgs("Type")]))],ConstType(SortNoArgs("TypeGrouped")))),OpDecl("BooleanType",ConstType(SortNoArgs("BooleanType"))),OpDecl("IntType",ConstType(SortNoArgs("NumericType"))),OpDecl("StringType",ConstType(SortNoArgs("StringType"))),OpDecl("ArrayType",FunType([ConstType(SortNoArgs("Expression")),ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("ArrayType")))),OpDecl("SliceType",ConstType(SortNoArgs("SliceType"))),OpDecl("StructType",FunType([ConstType(Sort("List",[SortNoArgs("FieldDecl")]))],ConstType(SortNoArgs("StructType")))),OpDecl("NormalField",FunType([ConstType(SortNoArgs("IdentifierList")),ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("FieldDecl")))),OpDecl("AnonField",FunType([ConstType(Sort("Option",[SortNoArgs("Pointer")])),ConstType(SortNoArgs("TypeName"))],ConstType(SortNoArgs("FieldDecl")))),OpDecl("Pointer",ConstType(SortNoArgs("Pointer"))),OpDecl("PointerType",FunType([ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("PointerType")))),OpDecl("FunctionType",FunType([ConstType(SortNoArgs("Signature"))],ConstType(SortNoArgs("FunctionType")))),OpDecl("Signature",FunType([ConstType(SortNoArgs("Parameters")),ConstType(Sort("Option",[SortNoArgs("Result")]))],ConstType(SortNoArgs("Signature")))),OpDeclInj(FunType([ConstType(SortNoArgs("Parameters"))],ConstType(SortNoArgs("Result")))),OpDeclInj(FunType([ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("Result")))),OpDecl("Parameters",FunType([ConstType(Sort("List",[SortNoArgs("ParameterDecl")]))],ConstType(SortNoArgs("Parameters")))),OpDecl("ParameterDecl",FunType([ConstType(SortNoArgs("ID")),ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("ParameterDecl")))),OpDecl("InterfaceType",ConstType(SortNoArgs("InterfaceType"))),OpDecl("MapType",ConstType(SortNoArgs("MapType"))),OpDecl("Channel",FunType([ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("ChannelType")))),OpDecl("ReceivingChannel",FunType([ConstType(SortNoArgs("UnaryOp")),ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("ChannelType")))),OpDecl("SendingChannel",FunType([ConstType(SortNoArgs("UnaryOp")),ConstType(SortNoArgs("Type"))],ConstType(SortNoArgs("ChannelType")))),OpDecl("Builtin",ConstType(SortNoArgs("BinaryOp"))),OpDecl("Builtin",ConstType(SortNoArgs("UnaryOp"))),OpDecl("Builtin",ConstType(SortNoArgs("Identifier"))),OpDecl("Builtin",ConstType(SortNoArgs("TypeLit"))),OpDecl("Builtin",ConstType(SortNoArgs("StringLit"))),OpDecl("Builtin",ConstType(SortNoArgs("ID"))),OpDecl("Builtin",ConstType(SortNoArgs("STRING"))),OpDecl("Builtin",ConstType(SortNoArgs("FLOAT"))),OpDecl("Builtin",ConstType(SortNoArgs("INT"))),OpDecl("Builtin",ConstType(SortNoArgs("TypeName"))),OpDecl("Builtin",ConstType(SortNoArgs("OperandName"))),OpDecl("Builtin",ConstType(SortNoArgs("Literal")))])]),Rules([RDefNoArgs("generate-js-ast",Rule(Var("ast"),Var("result"),Assign(Var("result"),App(CallNoArgs(SVar("gen-js-ast")),Var("ast"))))),RDefNoArgs("sub-go",Rule(Var("ast"),Var("analyzedAst"),Assign(Var("analyzedAst"),App(CallNoArgs(SVar("subAllChannels")),Var("ast"))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("SourceFile",[Var("packageClause"),Wld,Var("topLevelDecls")])),NoAnnoList(Op("Program",[Var("js")])),Seq(Assign(Var("packageName"),App(CallNoArgs(SVar("package-name")),Var("packageClause"))),Seq(Assign(Var("jsdecl"),App(Call(SVar("map"),[CallNoArgs(SVar("gen-js-ast"))]),Var("topLevelDecls"))),Assign(Var("js"),App(CallNoArgs(SVar("concat")),NoAnnoList(List([NoAnnoList(List([NoAnnoList(Op("varDecl",[NoAnnoList(Str("\"routine\"")),NoAnnoList(Op("Call",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"require\""))])),NoAnnoList(List([NoAnnoList(Op("String",[NoAnnoList(Str("\"\\\"\\\"../js/goroutine.js\\\"\\\"\""))]))]))]))])),NoAnnoList(Op("varDecl",[NoAnnoList(Str("\"__GO_ARRAYLIB__\"")),NoAnnoList(Op("Call",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"require\""))])),NoAnnoList(List([NoAnnoList(Op("String",[NoAnnoList(Str("\"\\\"\\\"../js/go-array.js\\\"\\\"\""))]))]))]))])),NoAnnoList(Op("varDecl",[NoAnnoList(Str("\"__GO_POINTERLIB__\"")),NoAnnoList(Op("Call",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"require\""))])),NoAnnoList(List([NoAnnoList(Op("String",[NoAnnoList(Str("\"\\\"\\\"../js/go-pointer.js\\\"\\\"\""))]))]))]))])),NoAnnoList(Op("varDecl",[NoAnnoList(Str("\"__GO_STRUCTLIB__\"")),NoAnnoList(Op("Call",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"require\""))])),NoAnnoList(List([NoAnnoList(Op("String",[NoAnnoList(Str("\"\\\"\\\"../js/go-struct.js\\\"\\\"\""))]))]))]))]))])),Var("jsdecl"),NoAnnoList(List([NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"main\""))])),NoAnnoList(List([]))]))]))]))])))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("FunctionDecl",[NoAnnoList(Op("FunctionName",[Var("name")])),NoAnnoList(Op("Function",[NoAnnoList(Op("Signature",[NoAnnoList(Op("Parameters",[Var("params")])),Var("returnType")])),NoAnnoList(Op("FunctionBody",[Var("block")]))]))])),NoAnnoList(Op("method",[Var("name"),Var("paramsJs"),Var("bodyJs")])),Seq(Assign(Var("retparname"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"__retcallback__\"")))),Seq(Assign(Var("paramsJs"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(Call(SVar("map"),[CallNoArgs(SVar("gen-js-ast"))]),Var("params")),NoAnnoList(List([NoAnnoList(Op("parameter",[Var("retparname")]))]))])))),Assign(Var("bodyJs"),App(CallT(SVar("func-block"),[],[Var("retparname")]),Var("block"))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("MethodDecl",[NoAnnoList(Op("Parameters",[Var("receiver")])),NoAnnoList(Op("MethodName",[Var("name")])),NoAnnoList(Op("Function",[NoAnnoList(Op("Signature",[NoAnnoList(Op("Parameters",[Var("params")])),Var("returntype")])),NoAnnoList(Op("FunctionBody",[Var("block")]))]))])),NoAnnoList(Op("method",[Var("name"),Var("paramsJs"),Var("bodyJs")])),Seq(Assign(Var("retparname"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"__retcallback__\"")))),Seq(Assign(Var("paramsJs"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(Call(SVar("map"),[CallNoArgs(SVar("gen-js-ast"))]),Var("receiver")),App(Call(SVar("map"),[CallNoArgs(SVar("gen-js-ast"))]),Var("params")),NoAnnoList(List([NoAnnoList(Op("parameter",[Var("retparname")]))]))])))),Assign(Var("bodyJs"),App(CallT(SVar("func-block"),[],[Var("retparname")]),Var("block"))))))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("ParameterDecl",[Var("name"),Wld])),NoAnnoList(Op("parameter",[Var("name")])))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],RuleNoCond(NoAnnoList(Op("ConstDecl",[Var("constDecl")])),App(CallT(SVar("convert-stmt"),[],[Var("defername")]),Var("constDecl")))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],RuleNoCond(NoAnnoList(Op("VarDecl",[Var("varDecl")])),App(CallT(SVar("convert-stmt"),[],[Var("defername")]),Var("varDecl")))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],RuleNoCond(NoAnnoList(Op("VarSpecTyped",[NoAnnoList(Op("IdentifierList",[Var("identifierList")])),Wld,NoAnnoList(Op("None",[]))])),NoAnnoList(Tuple([App(Call(SVar("map"),[CallNoArgs(SVar("to-js-var"))]),Var("identifierList")),NoAnnoList(List([]))])))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],RuleNoCond(NoAnnoList(Op("VarSpecTyped",[Var("idList"),Wld,NoAnnoList(Op("Some",[Var("list")]))])),App(CallT(SVar("stmt-to-js"),[],[Var("defername")]),NoAnnoList(Op("ConstSpec",[Var("idList"),Var("list")]))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],RuleNoCond(NoAnnoList(Op("ConstSpecTyped",[NoAnnoList(Op("IdentifierList",[Var("identifierList")])),Wld,NoAnnoList(Op("None",[]))])),NoAnnoList(Tuple([App(Call(SVar("map"),[CallNoArgs(SVar("to-js-const"))]),Var("identifierList")),NoAnnoList(List([]))])))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],RuleNoCond(NoAnnoList(Op("ConstSpecTyped",[Var("idList"),Wld,NoAnnoList(Op("Some",[Var("list")]))])),App(CallT(SVar("stmt-to-js"),[],[Var("defername")]),NoAnnoList(Op("ConstSpec",[Var("idList"),Var("list")]))))),RDefNoArgs("to-js-var",RuleNoCond(Var("identifier"),NoAnnoList(Op("varDecl",[Var("identifier"),NoAnnoList(Op("Null",[]))])))),RDefNoArgs("to-js-const",RuleNoCond(Var("identifier"),NoAnnoList(Op("constDecl",[Var("identifier"),NoAnnoList(Op("Null",[]))])))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("VarSpec",[NoAnnoList(Op("IdentifierList",[Var("targets")])),NoAnnoList(Op("VarDeclAssign",[NoAnnoList(Op("ExpressionList",[Var("values")]))]))])),NoAnnoList(Tuple([Var("expressions"),Var("stmts")])),Seq(Assign(Var("tuples"),App(Call(SVar("zip"),[CallNoArgs(SVar("to-js-vars"))]),NoAnnoList(Tuple([Var("targets"),Var("values")])))),Seq(Assign(Var("expressions"),App(Call(SVar("map"),[CallNoArgs(SVar("exp"))]),Var("tuples"))),Assign(Var("stmts"),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("stmts"))]),Var("tuples"))))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("ConstSpec",[NoAnnoList(Op("IdentifierList",[Var("targets")])),NoAnnoList(Op("ConstDeclAssign",[NoAnnoList(Op("ExpressionList",[Var("values")]))]))])),NoAnnoList(Tuple([Var("expressions"),Var("stmts")])),Seq(Assign(Var("tuples"),App(Call(SVar("zip"),[CallNoArgs(SVar("to-js-consts"))]),NoAnnoList(Tuple([Var("targets"),Var("values")])))),Seq(Assign(Var("expressions"),App(Call(SVar("map"),[CallNoArgs(SVar("exp"))]),Var("tuples"))),Assign(Var("stmts"),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("stmts"))]),Var("tuples"))))))),RDefNoArgs("to-js-vars",Rule(NoAnnoList(Tuple([Var("target"),Var("value")])),NoAnnoList(Tuple([NoAnnoList(Op("varDecl",[Var("target"),App(CallNoArgs(SVar("exp")),Var("valueJs"))])),App(CallNoArgs(SVar("stmts")),Var("valueJs"))])),Assign(Var("valueJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("value"))))),RDefNoArgs("to-js-consts",Rule(NoAnnoList(Tuple([Var("target"),Var("value")])),NoAnnoList(Tuple([NoAnnoList(Op("constDecl",[Var("target"),App(CallNoArgs(SVar("exp")),Var("valueJs"))])),App(CallNoArgs(SVar("stmts")),Var("valueJs"))])),Assign(Var("valueJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("value"))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("ShortVarDecl",[NoAnnoList(Op("IdentifierList",[Var("targets")])),NoAnnoList(Op("ShortVarDeclAssign",[NoAnnoList(Op("ExpressionList",[Var("values")]))]))])),NoAnnoList(Tuple([Var("expressions"),Var("stmts")])),Seq(Assign(Var("tuples"),App(Call(SVar("zip"),[CallNoArgs(SVar("to-js-vars"))]),NoAnnoList(Tuple([Var("targets"),Var("values")])))),Seq(Assign(Var("expressions"),App(Call(SVar("map"),[CallNoArgs(SVar("exp"))]),Var("tuples"))),Assign(Var("stmts"),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("stmts"))]),Var("tuples"))))))),RDefNoArgs("stmt-list",RuleNoCond(NoAnnoList(Tuple([Var("stmtlist"),Wld])),Var("stmtlist"))),RDefNoArgs("subbed-list",RuleNoCond(NoAnnoList(Tuple([Wld,Var("stmt")])),Var("stmt"))),RDefT("func-block",[],[DefaultVarDec("callbackname")],Rule(NoAnnoList(Op("Block",[Var("statementList")])),NoAnnoList(List([NoAnnoList(Op("try",[App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([NoAnnoList(List([Var("deferStackDecl"),Var("deferStackSetRet")])),Var("statementsJs")]))),NoAnnoList(Op("catch",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"e\""))])),NoAnnoList(List([Var("executeDeferred")])),NoAnnoList(Op("None",[]))]))]))])),Seq(Assign(Var("deferstackname"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"___deferstack___\"")))),Seq(Assign(Var("deferStackDecl"),NoAnnoList(Op("varDecl",[Var("deferstackname"),NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"routine\""))])),NoAnnoList(Str("\"newDeferList\""))])),NoAnnoList(List([]))]))]))),Seq(Assign(Var("deferStackSetRet"),NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[Var("deferstackname")])),NoAnnoList(Str("\"setCallback\""))])),NoAnnoList(List([NoAnnoList(Op("Identifier",[Var("callbackname")]))]))]))]))),Seq(Assign(Var("statements"),App(CallNoArgs(SVar("statements-from-list")),Var("statementList"))),Seq(Assign(Var("executeDeferred"),App(CallT(SVar("get-deferstmt"),[],[Var("deferstackname")]),NoAnnoList(List([])))),Seq(Assign(Var("statementsWithAddedJs"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("statements"),NoAnnoList(List([NoAnnoList(Op("AddedJsStmt",[NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[Var("deferstackname")])),NoAnnoList(Str("\"ret\""))])),NoAnnoList(List([]))]))]))]))]))])))),Assign(Var("statementsJs"),App(CallT(SVar("stmt-iter"),[],[Var("deferstackname")]),Var("statementsWithAddedJs"))))))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("Block",[Var("statementList")])),Var("js"),Seq(Assign(Var("statements"),App(CallNoArgs(SVar("statements-from-list")),Var("statementList"))),Assign(Var("js"),App(CallT(SVar("stmt-iter"),[],[NoAnnoList(Str("\"\""))]),Var("statements")))))),RDefT("process-substituted",[],[DefaultVarDec("parstmt"),DefaultVarDec("rest"),DefaultVarDec("defername")],Rule(NoAnnoList(ListTail([NoAnnoList(Op("SendStmt",[Var("channel"),Var("exp")]))],NoAnnoList(List([])))),NoAnnoList(List([NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[App(CallNoArgs(SVar("Fst")),Var("parstmt")),NoAnnoList(Str("\"send\""))])),NoAnnoList(List([App(CallNoArgs(SVar("Snd")),Var("parstmt")),NoAnnoList(Op("AnonFunction",[NoAnnoList(List([])),NoAnnoList(List([NoAnnoList(Op("try",[Var("remaining"),NoAnnoList(Op("catch",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"e\""))])),NoAnnoList(List([Var("executeDeferred")])),NoAnnoList(Op("None",[]))]))]))]))]))]))]))]))])),Seq(Assign(Var("remaining"),App(CallT(SVar("stmt-iter"),[],[Var("defername")]),Var("rest"))),Assign(Var("executeDeferred"),App(CallT(SVar("get-deferstmt"),[],[Var("defername")]),NoAnnoList(List([]))))))),RDefT("process-substituted",[],[DefaultVarDec("parstmt"),DefaultVarDec("rest"),DefaultVarDec("defername")],Rule(NoAnnoList(ListTail([NoAnnoList(Op("SubstitudedCall",[Var("target"),Var("argsJs"),Var("subVarName")]))],NoAnnoList(List([])))),NoAnnoList(List([Var("callStmt")])),Seq(Assign(Var("tailJs"),App(CallT(SVar("stmt-iter"),[],[Var("defername")]),Var("rest"))),Seq(Assign(Var("executeDeferred"),App(CallT(SVar("get-deferstmt"),[],[Var("defername")]),NoAnnoList(List([])))),Seq(Assign(Var("retFunc"),NoAnnoList(Op("AnonFunction",[NoAnnoList(List([NoAnnoList(Op("parameter",[Var("subVarName")]))])),NoAnnoList(List([NoAnnoList(Op("try",[App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("parstmt"),Var("tailJs")]))),NoAnnoList(Op("catch",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"e\""))])),NoAnnoList(List([Var("executeDeferred")])),NoAnnoList(Op("None",[]))]))]))]))]))),Assign(Var("callStmt"),NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[App(CallNoArgs(SVar("get-target")),Var("target")),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("argsJs"),NoAnnoList(List([Var("retFunc")]))])))]))])))))))),RDefT("process-substituted",[],[DefaultVarDec("parstmt"),DefaultVarDec("rest"),DefaultVarDec("defername")],Rule(NoAnnoList(ListTail([NoAnnoList(Op("SubstitudedCall",[Var("target"),Var("argsJs"),Var("subVarName")]))],Var("tail"))),NoAnnoList(List([Var("callStmt")])),Seq(Assign(Var("tailJs"),App(CallT(SVar("process-substituted"),[],[Var("parstmt"),Var("rest"),Var("defername")]),Var("tail"))),Seq(Assign(Var("executeDeferred"),App(CallT(SVar("get-deferstmt"),[],[Var("defername")]),NoAnnoList(List([])))),Seq(Assign(Var("retFunc"),NoAnnoList(Op("AnonFunction",[NoAnnoList(List([NoAnnoList(Op("parameter",[Var("subVarName")]))])),NoAnnoList(List([NoAnnoList(Op("try",[Var("tailJs"),NoAnnoList(Op("catch",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"e\""))])),NoAnnoList(List([Var("executeDeferred")])),NoAnnoList(Op("None",[]))]))]))]))]))),Assign(Var("callStmt"),NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[App(CallNoArgs(SVar("get-target")),Var("target")),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("argsJs"),NoAnnoList(List([Var("retFunc")]))])))]))])))))))),RDefNoArgs("get-target",RuleNoCond(As(Var("a"),NoAnnoList(Op("AnonFunction",[Var("x"),Var("y")]))),NoAnnoList(Op("Parenthesised",[Var("a")])))),RDefNoArgs("get-target",RuleNoCond(As(Var("p"),NoAnnoList(Op("Property",[Wld,Wld]))),Var("p"))),RDefNoArgs("get-target",RuleNoCond(Var("x"),NoAnnoList(Op("Identifier",[Var("x")])))),RDefT("process-substituted",[],[DefaultVarDec("parent"),DefaultVarDec("rest"),DefaultVarDec("dstack")],Rule(NoAnnoList(ListTail([NoAnnoList(Op("ReceiveStmt",[Var("varname"),Var("channelExp")]))],NoAnnoList(List([])))),NoAnnoList(List([NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[Var("channelExp"),NoAnnoList(Str("\"receive\""))])),NoAnnoList(List([NoAnnoList(Op("AnonFunction",[NoAnnoList(List([NoAnnoList(Op("parameter",[Var("varnameJs")]))])),NoAnnoList(List([NoAnnoList(Op("try",[App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("parent"),Var("tailJs")]))),NoAnnoList(Op("catch",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"e\""))])),NoAnnoList(List([Var("executeDeferred")])),NoAnnoList(Op("None",[]))]))]))]))]))]))]))]))])),Seq(Assign(Var("varnameJs"),App(CallNoArgs(SVar("extract-varname")),Var("varname"))),Seq(Assign(Var("tailJs"),App(CallT(SVar("stmt-iter"),[],[Var("dstack")]),Var("rest"))),Assign(Var("executeDeferred"),App(CallT(SVar("get-deferstmt"),[],[Var("dstack")]),NoAnnoList(List([])))))))),RDefT("process-substituted",[],[DefaultVarDec("parent"),DefaultVarDec("rest"),DefaultVarDec("dstack")],Rule(NoAnnoList(ListTail([NoAnnoList(Op("ReceiveStmt",[Var("varname"),Var("channelExp")]))],Var("tail"))),NoAnnoList(List([NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[Var("channelExpJs"),NoAnnoList(Str("\"receive\""))])),NoAnnoList(List([NoAnnoList(Op("AnonFunction",[NoAnnoList(List([NoAnnoList(Op("parameter",[Var("varnameJs")]))])),Var("nextReceive")]))]))]))]))])),Seq(Assign(Var("channelExpJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("channelExp"))),Seq(Assign(Var("varnameJs"),App(CallNoArgs(SVar("extract-varname")),Var("varname"))),Assign(Var("nextReceive"),App(CallT(SVar("process-substituted"),[],[Var("parent"),Var("rest"),Var("dstack")]),Var("tail"))))))),RDefT("process-substituted",[],[DefaultVarDec("parstmt"),DefaultVarDec("rest"),DefaultVarDec("defername")],Rule(NoAnnoList(List([])),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("parstmt"),Var("restJs")]))),Assign(Var("restJs"),App(CallT(SVar("stmt-iter"),[],[Var("defername")]),Var("rest"))))),RDefT("stmt-iter",[],[DefaultVarDec("defername")],Rule(NoAnnoList(ListTail([As(Var("stat"),NoAnnoList(Op("SendStmt",[Var("channel"),Var("exp")])))],Var("xs"))),Var("ret"),Seq(Assign(Var("tupleChan"),App(CallNoArgs(SVar("gen-js-ast")),Var("channel"))),Seq(Assign(Var("tupleExp"),App(CallNoArgs(SVar("gen-js-ast")),Var("exp"))),Seq(Assign(Var("stmts"),App(CallNoArgs(SVar("concat")),NoAnnoList(List([App(CallNoArgs(SVar("stmts")),Var("tupleChan")),App(CallNoArgs(SVar("stmts")),Var("tupleExp")),NoAnnoList(List([Var("stat")]))])))),Assign(Var("ret"),App(CallT(SVar("process-substituted"),[],[NoAnnoList(Tuple([App(CallNoArgs(SVar("exp")),Var("tupleChan")),App(CallNoArgs(SVar("exp")),Var("tupleExp"))])),Var("xs"),Var("defername")]),Var("stmts")))))))),RDefT("stmt-iter",[],[DefaultVarDec("defername")],Rule(NoAnnoList(ListTail([Var("stmt")],Var("xs"))),Var("ret"),Seq(Assign(Var("tuple"),App(CallT(SVar("convert-stmt"),[],[Var("defername")]),Var("stmt"))),Seq(Assign(Var("subbedExps"),App(CallNoArgs(SVar("subbed-list")),Var("tuple"))),Assign(Var("ret"),App(CallT(SVar("process-substituted"),[],[App(CallNoArgs(SVar("stmt-list")),Var("tuple")),Var("xs"),Var("defername")]),Var("subbedExps"))))))),RDefT("stmt-iter",[],[DefaultVarDec("defername")],RuleNoCond(NoAnnoList(List([])),NoAnnoList(List([])))),SDefT("convert-stmt",[],[DefaultVarDec("defername")],CallT(SVar("stmt-to-js"),[],[Var("defername")])),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],RuleNoCond(NoAnnoList(Op("AddedJsStmt",[Var("stmt")])),NoAnnoList(Tuple([NoAnnoList(List([Var("stmt")])),NoAnnoList(List([]))])))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("ExpressionStmt",[Var("expression")])),NoAnnoList(Tuple([NoAnnoList(List([NoAnnoList(Op("expStmt",[Var("exp")]))])),Var("stmts")])),Seq(Assign(Var("tuple"),App(CallNoArgs(SVar("gen-js-ast")),Var("expression"))),Seq(Assign(Var("exp"),App(CallNoArgs(SVar("exp")),Var("tuple"))),Assign(Var("stmts"),App(CallNoArgs(SVar("stmts")),Var("tuple"))))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("GoStmt",[Var("exp")])),NoAnnoList(Tuple([NoAnnoList(List([NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"routine\""))])),NoAnnoList(Str("\"go\""))])),NoAnnoList(List([NoAnnoList(Op("AnonFunction",[NoAnnoList(List([])),NoAnnoList(List([NoAnnoList(Op("expStmt",[App(CallNoArgs(SVar("exp")),Var("tuple"))]))]))]))]))]))]))])),App(CallNoArgs(SVar("stmts")),Var("tuple"))])),Assign(Var("tuple"),App(CallNoArgs(SVar("go-exp-to-js")),Var("exp"))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],RuleNoCond(NoAnnoList(Op("ReturnStmt",[NoAnnoList(Op("None",[]))])),NoAnnoList(Tuple([NoAnnoList(List([NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[Var("defername")])),NoAnnoList(Str("\"ret\""))])),NoAnnoList(List([]))]))])),NoAnnoList(Op("return",[NoAnnoList(Op("Undefined",[]))]))])),NoAnnoList(List([]))])))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("ReturnStmt",[NoAnnoList(Op("Some",[NoAnnoList(Op("ExpressionList",[NoAnnoList(List([Var("exp")]))]))]))])),NoAnnoList(Tuple([NoAnnoList(List([NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[Var("defername")])),NoAnnoList(Str("\"ret\""))])),NoAnnoList(List([App(CallNoArgs(SVar("exp")),Var("expJs"))]))]))])),NoAnnoList(Op("return",[NoAnnoList(Op("Undefined",[]))]))])),App(CallNoArgs(SVar("stmts")),Var("expJs"))])),Assign(Var("expJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("exp"))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("ReturnStmt",[NoAnnoList(Op("Some",[Var("expList")]))])),NoAnnoList(Tuple([NoAnnoList(List([NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[Var("defername")])),NoAnnoList(Str("\"ret\""))])),NoAnnoList(List([App(CallNoArgs(SVar("exp")),Var("arrayJs"))]))]))])),NoAnnoList(Op("return",[NoAnnoList(Op("Undefined",[]))]))])),App(CallNoArgs(SVar("stmts")),Var("arrayJs"))])),Assign(Var("arrayJs"),App(CallNoArgs(SVar("exps-list-to-js-array")),Var("expList"))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("Assignment",[NoAnnoList(Op("ExpressionList",[Var("targetExpressions")])),NoAnnoList(Op("AssignEquals",[])),NoAnnoList(Op("ExpressionList",[NoAnnoList(List([Var("singleValueExpression")]))]))])),NoAnnoList(Tuple([Var("js"),App(CallNoArgs(SVar("stmts")),Var("valuesArray"))])),Seq(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("targetExpressions")),NoAnnoList(Int("1"))]))),Seq(Assign(Var("valuesArray"),App(CallNoArgs(SVar("gen-js-ast")),Var("singleValueExpression"))),Assign(Var("js"),App(CallNoArgs(SVar("gen-js-ast-multiple-assignment")),NoAnnoList(Tuple([App(CallNoArgs(SVar("exp")),Var("valuesArray")),Var("targetExpressions")])))))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("Assignment",[NoAnnoList(Op("ExpressionList",[Var("targetExpressions")])),NoAnnoList(Op("AssignEquals",[])),NoAnnoList(Op("ExpressionList",[Var("valueExpressions")]))])),NoAnnoList(Tuple([Var("js"),Var("statements")])),Seq(Assign(Var("tuples"),App(Call(SVar("zip"),[CallNoArgs(SVar("to-js-equals-assign"))]),NoAnnoList(Tuple([Var("targetExpressions"),Var("valueExpressions")])))),Seq(Assign(Var("js"),App(Call(SVar("map"),[CallNoArgs(SVar("stmt-list"))]),Var("tuples"))),Assign(Var("statements"),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("stmts"))]),Var("tuples"))))))),RDefNoArgs("gen-js-ast-multiple-assignment",Rule(NoAnnoList(Tuple([Var("valuesArray"),Var("targetExps")])),App(CallNoArgs(SVar("flatten-list")),NoAnnoList(List([NoAnnoList(List([Var("valuesArrayJs")])),Var("assignmentsJs")]))),Seq(Assign(Var("tmpIdentifier"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"tmp_assign_\"")))),Seq(Assign(Var("valuesArrayJs"),NoAnnoList(Op("varDecl",[Var("tmpIdentifier"),Var("valuesArray")]))),Assign(Var("assignmentsJs"),App(Call(SVar("map"),[CallT(SVar("gen-js-ast-indexed-assign"),[],[Var("tmpIdentifier")])]),App(CallNoArgs(SVar("add-indices")),Var("targetExps")))))))),RDefNoArgs("to-js-equals-assign",Rule(NoAnnoList(Tuple([NoAnnoList(Op("UnaryExpr",[NoAnnoList(Op("UnaryExpr",[NoAnnoList(Str("\"*\"")),Var("operand")]))])),Var("rhs")])),NoAnnoList(Tuple([NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[Var("operandJs"),NoAnnoList(Str("\"set\""))])),NoAnnoList(List([App(CallNoArgs(SVar("exp")),Var("rhJs"))]))]))])),App(CallNoArgs(SVar("stmts")),Var("rhJs"))])),Seq(Assign(Var("rhJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("rhs"))),Assign(Var("operandJs"),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("operand")))))),RDefNoArgs("to-js-equals-assign",Rule(NoAnnoList(Tuple([Var("lhs"),Var("rhs")])),NoAnnoList(Tuple([NoAnnoList(Op("assignment",[App(CallNoArgs(SVar("exp")),Var("lhsJs")),App(CallNoArgs(SVar("exp")),Var("rhsJs"))])),App(CallNoArgs(SVar("stmts")),Var("rhsJs"))])),Seq(Assign(Var("lhsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("lhs"))),Assign(Var("rhsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("rhs")))))),RDefT("gen-js-ast-indexed-assign",[],[DefaultVarDec("tmpIdentifier")],Rule(NoAnnoList(Tuple([Var("index"),NoAnnoList(Op("UnaryExpr",[NoAnnoList(Op("UnaryExpr",[NoAnnoList(Str("\"*\"")),Var("operand")]))]))])),NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[Var("operandJs"),NoAnnoList(Str("\"set\""))])),NoAnnoList(List([Var("array")]))]))])),Seq(Assign(Var("operandJs"),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("operand"))),Assign(Var("array"),NoAnnoList(Op("Array",[NoAnnoList(Op("Identifier",[Var("tmpIdentifier")])),NoAnnoList(Op("IntegerLiteral",[App(CallNoArgs(SVar("int-dec")),Var("index"))]))])))))),RDefT("gen-js-ast-indexed-assign",[],[DefaultVarDec("tmpIdentifier")],Rule(NoAnnoList(Tuple([Var("index"),Var("lhs")])),NoAnnoList(Op("assignment",[Var("lhsJs"),NoAnnoList(Op("Array",[NoAnnoList(Op("Identifier",[Var("tmpIdentifier")])),NoAnnoList(Op("IntegerLiteral",[App(CallNoArgs(SVar("int-dec")),Var("index"))]))]))])),Assign(Var("lhsJs"),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs"))))),RDefNoArgs("exps-list-to-js-array",Rule(NoAnnoList(Op("ExpressionList",[Var("exps")])),NoAnnoList(Tuple([NoAnnoList(Op("ArrayLiteral",[App(Call(SVar("map"),[CallNoArgs(SVar("exp"))]),Var("expsJs"))])),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("stmts"))]),Var("expsJs"))])),Assign(Var("expsJs"),App(Call(SVar("map"),[CallNoArgs(SVar("gen-js-ast"))]),Var("exps"))))),RDefNoArgs("go-exp-to-js",Rule(NoAnnoList(Op("PrimaryExprArguments",[Var("target"),Var("args")])),NoAnnoList(Tuple([NoAnnoList(Op("Call",[NoAnnoList(Op("Parenthesised",[App(CallNoArgs(SVar("exp")),Var("targetJs"))])),App(CallNoArgs(SVar("exp")),Var("argsJs"))])),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("stmts")),Var("targetJs")),App(CallNoArgs(SVar("stmts")),Var("argsJs"))])))])),Seq(Assign(Var("targetJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("target"))),Assign(Var("argsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("args")))))),RDefNoArgs("go-exp-to-js",RuleNoCond(NoAnnoList(Op("UnaryExpr",[Var("x")])),App(CallNoArgs(SVar("go-exp-to-js")),Var("x")))),RDefNoArgs("go-exp-to-js",RuleNoCond(NoAnnoList(Op("PrimaryExpr",[Var("x")])),App(CallNoArgs(SVar("go-exp-to-js")),Var("x")))),RDefT("get-deferstmt",[],[DefaultVarDec("name")],Rule(Var("x"),NoAnnoList(List([])),BA(CallNoArgs(SVar("equal")),NoAnnoList(Tuple([Var("name"),NoAnnoList(Str("\"\""))]))))),RDefT("get-deferstmt",[],[DefaultVarDec("defername")],RuleNoCond(Var("x"),NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[Var("defername")])),NoAnnoList(Str("\"cleanUp\""))])),NoAnnoList(List([]))]))])))),RDefNoArgs("funcname",RuleNoCond(NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[Var("ident"),Var("p")])),Var("params")])),NoAnnoList(Op("Property",[Var("ident"),Var("p")])))),RDefNoArgs("funcname",RuleNoCond(NoAnnoList(Op("Call",[Var("x"),Var("params")])),NoAnnoList(Op("Identifier",[Var("x")])))),RDefNoArgs("params",RuleNoCond(NoAnnoList(Op("Call",[Var("funcname"),Var("params")])),Var("params"))),RDefT("gen-addparamstmt",[],[DefaultVarDec("defername")],RuleNoCond(Var("x"),NoAnnoList(Op("expStmt",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[Var("defername")])),NoAnnoList(Str("\"addParam\""))])),NoAnnoList(List([Var("x")]))]))])))),RDefNoArgs("stmts",RuleNoCond(NoAnnoList(Tuple([Wld,Var("stmts")])),Var("stmts"))),RDefNoArgs("exp",RuleNoCond(NoAnnoList(Tuple([Var("exps"),Wld])),Var("exps"))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("PrimaryExpr",[Var("primaryExpression")])),App(CallNoArgs(SVar("gen-js-ast")),Var("primaryExpression")))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("PrimaryExprArguments",[NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[NoAnnoList(Str("\"println\""))]))])),Var("args")])),NoAnnoList(Tuple([NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"console\""))])),NoAnnoList(Str("\"log\""))])),App(CallNoArgs(SVar("exp")),Var("argsJs"))])),App(CallNoArgs(SVar("stmts")),Var("argsJs"))])),Assign(Var("argsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("args"))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("PrimaryExprArguments",[NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[NoAnnoList(Str("\"make\""))]))])),NoAnnoList(Op("TypeArgWithList",[NoAnnoList(Op("Channel",[Wld])),Var("args")]))])),NoAnnoList(Tuple([NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"routine\""))])),NoAnnoList(Str("\"newChannel\""))])),App(CallNoArgs(SVar("exp")),Var("argsJs"))])),App(CallNoArgs(SVar("stmts")),Var("argsJs"))])),Assign(Var("argsJs"),App(CallNoArgs(SVar("gen-js-ast")),NoAnnoList(Op("Arguments",[NoAnnoList(Op("Some",[Var("args")]))])))))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("PrimaryExprArguments",[NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[NoAnnoList(Str("\"make\""))]))])),NoAnnoList(Op("TypeArg",[NoAnnoList(Op("Channel",[Wld]))]))])),NoAnnoList(Tuple([NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"routine\""))])),NoAnnoList(Str("\"newChannel\""))])),NoAnnoList(List([NoAnnoList(Op("IntegerLiteral",[NoAnnoList(Int("0"))]))]))])),NoAnnoList(List([]))])))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("PrimaryExprArguments",[NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[Var("target")]))])),Var("args")])),NoAnnoList(Tuple([NoAnnoList(Op("Identifier",[Var("subVarName")])),Var("allStmts")])),Seq(Assign(Var("subVarName"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"_functionresult\"")))),Seq(Assign(Var("argsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("args"))),Seq(Assign(Var("stmt"),NoAnnoList(List([NoAnnoList(Op("SubstitudedCall",[Var("target"),App(CallNoArgs(SVar("exp")),Var("argsJs")),Var("subVarName")]))]))),Assign(Var("allStmts"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("stmts")),Var("argsJs")),Var("stmt")]))))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("PrimaryExprArguments",[Var("exp"),Var("args")])),NoAnnoList(Tuple([NoAnnoList(Op("Identifier",[Var("subVarName")])),Var("allStmts")])),Seq(Assign(Var("subVarName"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"_functionresult\"")))),Seq(Assign(Var("argsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("args"))),Seq(Assign(Var("expJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("exp"))),Seq(Assign(Var("stmt"),NoAnnoList(List([NoAnnoList(Op("SubstitudedCall",[App(CallNoArgs(SVar("exp")),Var("expJs")),App(CallNoArgs(SVar("exp")),Var("argsJs")),Var("subVarName")]))]))),Assign(Var("allStmts"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("stmts")),Var("expJs")),App(CallNoArgs(SVar("stmts")),Var("argsJs")),Var("stmt")])))))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("PrimaryExprIndex",[Var("idExp"),NoAnnoList(Op("Index",[Var("indexExp")]))])),NoAnnoList(Tuple([NoAnnoList(Op("Array",[NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[App(CallNoArgs(SVar("exp")),Var("idExpJs")),NoAnnoList(Str("\"getVal\""))])),NoAnnoList(List([App(CallNoArgs(SVar("exp")),Var("indexExpJs"))]))])),Var("addition")])),Var("allStmts")])),Seq(Assign(Var("idExpJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("idExp"))),Seq(Assign(Var("indexExpJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("indexExp"))),Seq(Assign(Var("addition"),NoAnnoList(Op("Addition",[App(CallNoArgs(SVar("exp")),Var("indexExpJs")),NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[App(CallNoArgs(SVar("exp")),Var("idExpJs")),NoAnnoList(Str("\"getStartPos\""))])),NoAnnoList(List([App(CallNoArgs(SVar("exp")),Var("indexExpJs"))]))]))]))),Assign(Var("allStmts"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("stmts")),Var("idExpJs")),App(CallNoArgs(SVar("stmts")),Var("indexExpJs"))]))))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("PrimaryExprSlice",[Var("idExp"),Var("slice")])),NoAnnoList(Tuple([NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[App(CallNoArgs(SVar("exp")),Var("idExpJs")),NoAnnoList(Str("\"getSlice\""))])),App(CallNoArgs(SVar("exp")),Var("sliceJs"))])),Var("allStmts")])),Seq(Assign(Var("idExpJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("idExp"))),Seq(Assign(Var("sliceJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("slice"))),Assign(Var("allStmts"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("stmts")),Var("idExpJs")),App(CallNoArgs(SVar("stmts")),Var("sliceJs"))])))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("PrimaryExprSelector",[Var("exp"),NoAnnoList(Op("Selector",[Var("selectorName")]))])),NoAnnoList(Tuple([NoAnnoList(Op("Property",[App(CallNoArgs(SVar("exp")),Var("tuple")),Var("selectorName")])),App(CallNoArgs(SVar("stmts")),Var("tuple"))])),Assign(Var("tuple"),App(CallNoArgs(SVar("gen-js-ast")),Var("exp"))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("Slice",[Var("exp1"),Var("exp2")])),NoAnnoList(Tuple([NoAnnoList(List([App(CallNoArgs(SVar("exp")),Var("exp1Js")),App(CallNoArgs(SVar("exp")),Var("exp2Js"))])),Var("allStmts")])),Seq(Assign(Var("exp1Js"),App(CallNoArgs(SVar("slice-exp-to-js")),Var("exp1"))),Seq(Assign(Var("exp2Js"),App(CallNoArgs(SVar("slice-exp-to-js")),Var("exp2"))),Assign(Var("allStmts"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("stmts")),Var("exp1")),App(CallNoArgs(SVar("stmts")),Var("exp2"))])))))))),RDefNoArgs("slice-exp-to-js",RuleNoCond(NoAnnoList(Op("Some",[Var("x")])),App(CallNoArgs(SVar("gen-js-ast")),Var("x")))),RDefNoArgs("slice-exp-to-js",RuleNoCond(NoAnnoList(Op("None",[])),NoAnnoList(Tuple([NoAnnoList(Op("Undefined",[])),NoAnnoList(List([]))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("Channel",[NoAnnoList(Op("UnaryExpr",[Var("x")]))])),App(CallNoArgs(SVar("gen-js-ast")),Var("x")))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("UnaryExpr",[NoAnnoList(Str("\"*\"")),Var("exp")])),NoAnnoList(Tuple([NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[App(CallNoArgs(SVar("exp")),Var("expJs")),NoAnnoList(Str("\"get\""))])),NoAnnoList(List([]))])),App(CallNoArgs(SVar("stmts")),Var("expJs"))])),Assign(Var("expJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("exp"))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("UnaryExpr",[NoAnnoList(Str("\"<-\"")),Var("innerexp")])),NoAnnoList(Tuple([NoAnnoList(Op("Identifier",[Var("subVarName")])),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("stmts")),Var("innerExpTuple")),NoAnnoList(List([Var("stmt")]))])))])),Seq(Assign(Var("subVarName"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"gochanjs\"")))),Seq(Assign(Var("innerExpTuple"),App(CallNoArgs(SVar("gen-js-ast")),Var("innerexp"))),Assign(Var("stmt"),NoAnnoList(Op("ReceiveStmt",[NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[Var("subVarName")]))])),App(CallNoArgs(SVar("exp")),Var("innerExpTuple"))]))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("UnaryExpr",[NoAnnoList(Str("\"&\"")),Var("exp")])),NoAnnoList(Tuple([NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"__GO_POINTERLIB__\""))])),NoAnnoList(Str("\"newPointer\""))])),NoAnnoList(List([Var("set"),Var("get")]))])),App(CallNoArgs(SVar("stmts")),Var("expJs"))])),Seq(Assign(Var("expJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("exp"))),Seq(Assign(Var("expJsExp"),App(CallNoArgs(SVar("exp")),Var("expJs"))),Seq(Assign(Var("set"),App(CallNoArgs(SVar("gen-pointer-set")),Var("expJsExp"))),Assign(Var("get"),App(CallNoArgs(SVar("gen-pointer-get")),Var("expJsExp")))))))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("UnaryExpr",[Var("x")])),App(CallNoArgs(SVar("gen-js-ast")),Var("x")))),RDefNoArgs("gen-pointer-set",Rule(Var("e"),NoAnnoList(Op("AnonFunction",[NoAnnoList(List([NoAnnoList(Op("parameter",[Var("parname")]))])),NoAnnoList(List([NoAnnoList(Op("assignment",[Var("e"),NoAnnoList(Op("Identifier",[Var("parname")]))]))]))])),Assign(Var("parname"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"___parset___\"")))))),RDefNoArgs("gen-pointer-get",RuleNoCond(Var("e"),NoAnnoList(Op("AnonFunction",[NoAnnoList(List([])),NoAnnoList(List([NoAnnoList(Op("return",[Var("e")]))]))])))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("PrimaryExprArguments",[NoAnnoList(Op("Operand",[NoAnnoList(Op("MethodExpr",[NoAnnoList(Op("TypeName",[Var("receiver")])),Var("methodName")]))])),Var("args")])),NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[Var("receiver")])),Var("methodName")])),Var("argsJs")])),Assign(Var("argsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("args"))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("PrimaryExprArguments",[NoAnnoList(Op("Operand",[NoAnnoList(Op("Literal",[Var("functionLit")]))])),Var("args")])),NoAnnoList(Tuple([NoAnnoList(Op("Identifier",[Var("subVarName")])),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("stmts")),Var("argsTuple")),Var("stmt")])))])),Seq(Assign(Var("subVarName"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"_functionresult\"")))),Seq(Assign(Var("functionJs"),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("functionLit"))),Seq(Assign(Var("argsTuple"),App(CallNoArgs(SVar("gen-js-ast")),Var("args"))),Assign(Var("stmt"),NoAnnoList(List([NoAnnoList(Op("SubstitudedCall",[Var("functionJs"),App(CallNoArgs(SVar("exp")),Var("argsTuple")),Var("subVarName")]))])))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("Arguments",[NoAnnoList(Op("ExpressionList",[Var("args")]))])),NoAnnoList(Tuple([Var("expArgJs"),Var("allStmts")])),Seq(Assign(Var("argsJs"),App(Call(SVar("map"),[CallNoArgs(SVar("gen-js-ast"))]),Var("args"))),Seq(Assign(Var("expArgJs"),App(Call(SVar("map"),[CallNoArgs(SVar("exp"))]),Var("argsJs"))),Assign(Var("allStmts"),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("stmts"))]),Var("argsJs"))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("Arguments",[NoAnnoList(Op("Some",[NoAnnoList(Op("ExpressionList",[Var("args")]))]))])),NoAnnoList(Tuple([Var("expArgJs"),Var("allStmts")])),Seq(Assign(Var("argsJs"),App(Call(SVar("map"),[CallNoArgs(SVar("gen-js-ast"))]),Var("args"))),Seq(Assign(Var("expArgJs"),App(Call(SVar("map"),[CallNoArgs(SVar("exp"))]),Var("argsJs"))),Assign(Var("allStmts"),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("stmts"))]),Var("argsJs"))))))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("Arguments",[NoAnnoList(Op("None",[]))])),NoAnnoList(Tuple([NoAnnoList(List([])),NoAnnoList(List([]))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("Operand",[Var("operand")])),App(CallNoArgs(SVar("gen-js-ast")),Var("operand")))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("SubstitutedExp",[Var("exp"),Var("stmtlist"),Var("lastvar")])),App(CallNoArgs(SVar("gen-js-ast")),Var("exp")))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("OperandName",[Var("name")])),NoAnnoList(Tuple([NoAnnoList(Op("Identifier",[Var("name")])),NoAnnoList(List([]))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("Literal",[Var("literal")])),App(CallNoArgs(SVar("gen-js-ast")),Var("literal")))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("IntLit",[Var("int")])),NoAnnoList(Tuple([NoAnnoList(Op("IntegerLiteral",[Var("int")])),NoAnnoList(List([]))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("StringLit",[Var("string")])),NoAnnoList(Tuple([NoAnnoList(Op("String",[Var("string")])),NoAnnoList(List([]))])))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("CompositeLit",[NoAnnoList(Op("ArrayType",[Var("sizeExp"),Var("type")])),Var("arrayLit")])),NoAnnoList(Tuple([NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[NoAnnoList(Str("\"__GO_ARRAYLIB__\""))])),NoAnnoList(Str("\"newArray\""))])),NoAnnoList(List([App(CallNoArgs(SVar("exp")),Var("arrayLitJs")),App(CallNoArgs(SVar("exp")),Var("sizeExpJs")),NoAnnoList(Op("String",[Var("typeJs")]))]))])),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(CallNoArgs(SVar("stmts")),Var("sizeExpJs")),App(CallNoArgs(SVar("stmts")),Var("arrayLitJs"))])))])),Seq(Assign(Var("sizeExpJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("sizeExp"))),Seq(Assign(Var("typeJs"),NoAnnoList(Str("\"''\""))),Assign(Var("arrayLitJs"),App(CallNoArgs(SVar("array-to-js")),Var("arrayLit"))))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("CompositeLit",[Var("typename"),Var("list")])),NoAnnoList(Tuple([NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Op("Identifier",[Var("typename")])),NoAnnoList(Str("\"getNew\""))])),NoAnnoList(List([App(CallNoArgs(SVar("exp")),Var("tuple"))]))])),App(CallNoArgs(SVar("stmts")),Var("tuple"))])),Assign(Var("tuple"),App(CallNoArgs(SVar("array-to-js")),Var("list"))))),RDefNoArgs("array-to-js",Rule(NoAnnoList(Op("LiteralValue",[NoAnnoList(Op("Some",[NoAnnoList(Op("ElementList",[Var("x")]))]))])),NoAnnoList(Tuple([NoAnnoList(Op("ArrayLiteral",[Var("expList")])),Var("stmtList")])),Seq(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([App(Call(SVar("collect-om"),[Match(NoAnnoList(Op("KeyValPair",[Var("name"),Var("exp")])))]),Var("x")),NoAnnoList(List([]))]))),Seq(Assign(Var("tupleList"),App(Call(SVar("map"),[CallNoArgs(SVar("gen-js-ast"))]),Var("x"))),Seq(Assign(Var("expList"),App(Call(SVar("map"),[CallNoArgs(SVar("exp"))]),Var("tupleList"))),Assign(Var("stmtList"),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("stmts"))]),Var("tupleList")))))))),RDefNoArgs("array-to-js",Rule(NoAnnoList(Op("LiteralValue",[NoAnnoList(Op("Some",[NoAnnoList(Op("ElementList",[Var("x")]))]))])),NoAnnoList(Tuple([NoAnnoList(Op("Object",[Var("expList")])),Var("stmtList")])),Seq(Assign(Var("tupleList"),App(Call(SVar("map"),[CallNoArgs(SVar("gen-js-ast"))]),Var("x"))),Seq(Assign(Var("expList"),App(Call(SVar("map"),[CallNoArgs(SVar("exp"))]),Var("tupleList"))),Assign(Var("stmtList"),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("stmts"))]),Var("tupleList"))))))),RDefNoArgs("array-to-js",RuleNoCond(NoAnnoList(Op("LiteralValue",[NoAnnoList(Op("None",[]))])),NoAnnoList(Tuple([NoAnnoList(Op("ArrayLiteral",[NoAnnoList(List([]))])),NoAnnoList(List([]))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("FunctionLit",[Var("function")])),App(CallNoArgs(SVar("gen-js-ast")),Var("function")))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("SingleElem",[Var("exp")])),App(CallNoArgs(SVar("gen-js-ast")),Var("exp")))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("KeyValPair",[Var("name"),Var("exp")])),NoAnnoList(Tuple([NoAnnoList(Op("KeyValue",[Var("name"),App(CallNoArgs(SVar("exp")),Var("tuple"))])),App(CallNoArgs(SVar("stmts")),Var("tuple"))])),Assign(Var("tuple"),App(CallNoArgs(SVar("gen-js-ast")),Var("exp"))))),RDefNoArgs("gen-js-ast",Rule(NoAnnoList(Op("Function",[NoAnnoList(Op("Signature",[NoAnnoList(Op("Parameters",[Var("params")])),Var("returnType")])),NoAnnoList(Op("FunctionBody",[Var("block")]))])),NoAnnoList(Tuple([NoAnnoList(Op("AnonFunction",[Var("paramsJs"),Var("bodyJs")])),NoAnnoList(List([]))])),Seq(Assign(Var("retparname"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"__retcallback__\"")))),Seq(Assign(Var("paramsJs"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([App(Call(SVar("map"),[CallNoArgs(SVar("gen-js-ast"))]),Var("params")),NoAnnoList(List([NoAnnoList(Op("parameter",[Var("retparname")]))]))])))),Assign(Var("bodyJs"),App(CallT(SVar("func-block"),[],[Var("retparname")]),Var("block"))))))),SDefNoArgs("subAllChannels",Call(SVar("topdown"),[Call(SVar("try"),[CallNoArgs(SVar("substitute-channels"))])])),RDefNoArgs("substitute-channels",Rule(NoAnnoList(Op("UnaryExpr",[NoAnnoList(Str("\"<-\"")),NoAnnoList(Op("PrimaryExpr",[NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[Var("x")]))]))]))])),NoAnnoList(Op("SubstitutedExp",[NoAnnoList(Op("PrimaryExpr",[NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[Var("subVarName")]))]))])),NoAnnoList(List([Var("s")])),Var("subVarName")])),Seq(Assign(Var("subVarName"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"gochanjs\"")))),Assign(Var("s"),NoAnnoList(Op("ReceiveStmt",[NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[Var("subVarName")]))])),NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[Var("x")]))]))])))))),RDefNoArgs("substitute-channels",Rule(NoAnnoList(Op("UnaryExpr",[NoAnnoList(Str("\"<-\"")),Var("innerexp")])),NoAnnoList(Op("SubstitutedExp",[NoAnnoList(Op("PrimaryExpr",[NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[Var("subVarName")]))]))])),Var("stmtList"),Var("subVarName")])),Seq(Assign(Var("subVarName"),App(CallNoArgs(SVar("newname")),NoAnnoList(Str("\"gochanjs\"")))),Seq(Assign(Var("subbedInnerExp"),App(CallNoArgs(SVar("substitute-channels")),Var("innerexp"))),Seq(Assign(Var("stmt"),NoAnnoList(Op("ReceiveStmt",[NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[Var("subVarName")]))])),App(CallNoArgs(SVar("lastExp")),Var("subbedInnerExp"))]))),Assign(Var("stmtList"),App(Seq(CallNoArgs(SVar("addStmt")),CallNoArgs(SVar("extract-stmtlist"))),NoAnnoList(Tuple([Var("subbedInnerExp"),Var("stmt")]))))))))),RDefNoArgs("substitute-channels",RuleNoCond(NoAnnoList(Op("PrimaryExpr",[NoAnnoList(Op("Operand",[NoAnnoList(Op("GroupedExpression",[NoAnnoList(Op("UnaryExpr",[Var("x")]))]))]))])),App(CallNoArgs(SVar("substitute-channels")),Var("x")))),RDefNoArgs("lastVar",RuleNoCond(NoAnnoList(Op("SubstitutedExp",[Wld,Wld,Var("varname")])),Var("varname"))),RDefNoArgs("lastExp",RuleNoCond(NoAnnoList(Op("SubstitutedExp",[Var("exp"),Wld,Wld])),Var("exp"))),RDefNoArgs("extract-stmtlist",RuleNoCond(NoAnnoList(Op("SubstitutedExp",[Wld,Var("list"),Wld])),Var("list"))),RDefNoArgs("extract-varname",RuleNoCond(NoAnnoList(Op("Operand",[NoAnnoList(Op("OperandName",[Var("subVarName")]))])),Var("subVarName"))),RDefNoArgs("addStmt",Rule(NoAnnoList(Tuple([NoAnnoList(Op("SubstitutedExp",[Var("exp"),Var("stmtlist"),Var("lastvar")])),Var("stmt")])),NoAnnoList(Op("SubstitutedExp",[Var("exp"),Var("newlist"),Var("lastvar")])),Assign(Var("newlist"),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var("stmtlist"),NoAnnoList(List([Var("stmt")]))])))))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("BinaryExpr",[Var("lhs"),NoAnnoList(Str("\"==\"")),Var("rhs")])),NoAnnoList(Op("Equals",[App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs")),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("rhs"))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("BinaryExpr",[Var("lhs"),NoAnnoList(Str("\"!=\"")),Var("rhs")])),NoAnnoList(Op("NotEquals",[App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs")),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("rhs"))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("BinaryExpr",[Var("lhs"),NoAnnoList(Str("\"<\"")),Var("rhs")])),NoAnnoList(Op("Lower",[App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs")),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("rhs"))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("BinaryExpr",[Var("lhs"),NoAnnoList(Str("\"<=\"")),Var("rhs")])),NoAnnoList(Op("LowerEquals",[App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs")),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("rhs"))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("BinaryExpr",[Var("lhs"),NoAnnoList(Str("\">\"")),Var("rhs")])),NoAnnoList(Op("Greater",[App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs")),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("rhs"))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("BinaryExpr",[Var("lhs"),NoAnnoList(Str("\">=\"")),Var("rhs")])),NoAnnoList(Op("GreaterEquals",[App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs")),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("rhs"))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("BinaryExpr",[Var("lhs"),NoAnnoList(Str("\"+\"")),Var("rhs")])),NoAnnoList(Op("Addition",[App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs")),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("rhs"))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("BinaryExpr",[Var("lhs"),NoAnnoList(Str("\"-\"")),Var("rhs")])),NoAnnoList(Op("Substraction",[App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs")),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("rhs"))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("BinaryExpr",[Var("lhs"),NoAnnoList(Str("\"*\"")),Var("rhs")])),NoAnnoList(Op("Multiplication",[App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs")),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("rhs"))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("BinaryExpr",[Var("lhs"),NoAnnoList(Str("\"/\"")),Var("rhs")])),NoAnnoList(Op("Division",[App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("lhs")),App(Seq(CallNoArgs(SVar("gen-js-ast")),CallNoArgs(SVar("exp"))),Var("rhs"))])))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("Assignment",[NoAnnoList(Op("ExpressionList",[NoAnnoList(List([Var("target")]))])),NoAnnoList(Op("AssignAddOp",[NoAnnoList(Str("\"+\""))])),NoAnnoList(Op("ExpressionList",[NoAnnoList(List([Var("value")]))]))])),NoAnnoList(Tuple([NoAnnoList(List([Var("js")])),Var("statements")])),Seq(Assign(Var("tuple"),App(CallNoArgs(SVar("to-js-equals-addition-assign")),NoAnnoList(Tuple([Var("target"),Var("value")])))),Seq(Assign(Var("js"),App(CallNoArgs(SVar("stmt-list")),Var("tuple"))),Assign(Var("statements"),App(CallNoArgs(SVar("stmts")),Var("tuple"))))))),RDefNoArgs("to-js-equals-addition-assign",Rule(NoAnnoList(Tuple([Var("lhs"),Var("rhs")])),NoAnnoList(Tuple([NoAnnoList(Op("assignment",[App(CallNoArgs(SVar("exp")),Var("lhsJs")),NoAnnoList(Op("Addition",[App(CallNoArgs(SVar("exp")),Var("lhsJs")),App(CallNoArgs(SVar("exp")),Var("rhsJs"))]))])),App(CallNoArgs(SVar("stmts")),Var("rhsJs"))])),Seq(Assign(Var("lhsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("lhs"))),Assign(Var("rhsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("rhs")))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("Assignment",[NoAnnoList(Op("ExpressionList",[NoAnnoList(List([Var("target")]))])),NoAnnoList(Op("AssignAddOp",[NoAnnoList(Str("\"-\""))])),NoAnnoList(Op("ExpressionList",[NoAnnoList(List([Var("value")]))]))])),NoAnnoList(Tuple([NoAnnoList(List([Var("js")])),Var("statements")])),Seq(Assign(Var("tuple"),App(CallNoArgs(SVar("to-js-equals-substraction-assign")),NoAnnoList(Tuple([Var("target"),Var("value")])))),Seq(Assign(Var("js"),App(CallNoArgs(SVar("stmt-list")),Var("tuple"))),Assign(Var("statements"),App(CallNoArgs(SVar("stmts")),Var("tuple"))))))),RDefNoArgs("to-js-equals-substraction-assign",Rule(NoAnnoList(Tuple([Var("lhs"),Var("rhs")])),NoAnnoList(Tuple([NoAnnoList(Op("assignment",[App(CallNoArgs(SVar("exp")),Var("lhsJs")),NoAnnoList(Op("Substraction",[App(CallNoArgs(SVar("exp")),Var("lhsJs")),App(CallNoArgs(SVar("exp")),Var("rhsJs"))]))])),App(CallNoArgs(SVar("stmts")),Var("rhsJs"))])),Seq(Assign(Var("lhsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("lhs"))),Assign(Var("rhsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("rhs")))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("Assignment",[NoAnnoList(Op("ExpressionList",[NoAnnoList(List([Var("target")]))])),NoAnnoList(Op("AssignMulOp",[NoAnnoList(Str("\"*\""))])),NoAnnoList(Op("ExpressionList",[NoAnnoList(List([Var("value")]))]))])),NoAnnoList(Tuple([NoAnnoList(List([Var("js")])),Var("statements")])),Seq(Assign(Var("tuple"),App(CallNoArgs(SVar("to-js-equals-multiplication-assign")),NoAnnoList(Tuple([Var("target"),Var("value")])))),Seq(Assign(Var("js"),App(CallNoArgs(SVar("stmt-list")),Var("tuple"))),Assign(Var("statements"),App(CallNoArgs(SVar("stmts")),Var("tuple"))))))),RDefNoArgs("to-js-equals-multiplication-assign",Rule(NoAnnoList(Tuple([Var("lhs"),Var("rhs")])),NoAnnoList(Tuple([NoAnnoList(Op("assignment",[App(CallNoArgs(SVar("exp")),Var("lhsJs")),NoAnnoList(Op("Multiplication",[App(CallNoArgs(SVar("exp")),Var("lhsJs")),App(CallNoArgs(SVar("exp")),Var("rhsJs"))]))])),App(CallNoArgs(SVar("stmts")),Var("rhsJs"))])),Seq(Assign(Var("lhsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("lhs"))),Assign(Var("rhsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("rhs")))))),RDefT("stmt-to-js",[],[DefaultVarDec("defername")],Rule(NoAnnoList(Op("Assignment",[NoAnnoList(Op("ExpressionList",[NoAnnoList(List([Var("target")]))])),NoAnnoList(Op("AssignMulOp",[NoAnnoList(Str("\"/\""))])),NoAnnoList(Op("ExpressionList",[NoAnnoList(List([Var("value")]))]))])),NoAnnoList(Tuple([NoAnnoList(List([Var("js")])),Var("statements")])),Seq(Assign(Var("tuple"),App(CallNoArgs(SVar("to-js-equals-division-assign")),NoAnnoList(Tuple([Var("target"),Var("value")])))),Seq(Assign(Var("js"),App(CallNoArgs(SVar("stmt-list")),Var("tuple"))),Assign(Var("statements"),App(CallNoArgs(SVar("stmts")),Var("tuple"))))))),RDefNoArgs("to-js-equals-division-assign",Rule(NoAnnoList(Tuple([Var("lhs"),Var("rhs")])),NoAnnoList(Tuple([NoAnnoList(Op("assignment",[App(CallNoArgs(SVar("exp")),Var("lhsJs")),NoAnnoList(Op("Division",[App(CallNoArgs(SVar("exp")),Var("lhsJs")),App(CallNoArgs(SVar("exp")),Var("rhsJs"))]))])),App(CallNoArgs(SVar("stmts")),Var("rhsJs"))])),Seq(Assign(Var("lhsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("lhs"))),Assign(Var("rhsJs"),App(CallNoArgs(SVar("gen-js-ast")),Var("rhs")))))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("TypeDecl",[NoAnnoList(Op("TypeSpec",[Var("identif"),Var("type")]))])),NoAnnoList(Op("varDecl",[Var("identif"),NoAnnoList(Op("Call",[NoAnnoList(Op("Property",[NoAnnoList(Str("\"__GO_STRUCTLIB__\"")),NoAnnoList(Str("\"defStruct\""))])),NoAnnoList(List([NoAnnoList(Op("ArrayLiteral",[App(CallNoArgs(SVar("gen-js-ast")),Var("type"))]))]))]))])))),RDefNoArgs("gen-js-ast",RuleNoCond(NoAnnoList(Op("StructType",[Var("fieldDecl")])),App(Call(SVar("mapconcat"),[CallNoArgs(SVar("field-to-js"))]),Var("fieldDecl")))),RDefNoArgs("field-to-js",RuleNoCond(NoAnnoList(Op("NormalField",[NoAnnoList(Op("IdentifierList",[Var("ids")])),Var("type")])),App(Call(SVar("map"),[CallNoArgs(SVar("id-to-str"))]),Var("ids")))),RDefNoArgs("field-to-js",RuleNoCond(NoAnnoList(Op("AnonField",[Wld,Var("struct")])),NoAnnoList(List([App(CallNoArgs(SVar("id-to-str")),Var("struct"))])))),RDefNoArgs("field-to-js",RuleNoCond(NoAnnoList(Op("TypeName",[Var("x")])),NoAnnoList(List([App(CallNoArgs(SVar("id-to-str")),Var("x"))])))),RDefNoArgs("id-to-str",RuleNoCond(Var("x"),NoAnnoList(Op("String",[App(CallNoArgs(SVar("double-quote")),Var("x"))])))),SDefT("mapsep",[DefaultVarDec("f")],[DefaultVarDec("sep")],Seq(Call(SVar("map"),[CallNoArgs(SVar("f"))]),CallT(SVar("separate-by"),[],[Var("sep")]))),RDefNoArgs("package-name",RuleNoCond(NoAnnoList(Op("PackageClause",[NoAnnoList(Op("PackageName",[Var("name")]))])),Var("name"))),RDefNoArgs("statements-from-block",Rule(NoAnnoList(Op("Block",[Var("statementList")])),Var("statements"),Assign(Var("statements"),App(CallNoArgs(SVar("statements-from-list")),Var("statementList"))))),RDefNoArgs("statements-from-list",Rule(NoAnnoList(Op("StatementList",[Var("wrappedStatements")])),Var("statements"),Assign(Var("statements"),App(Call(SVar("map"),[CallNoArgs(SVar("unwrap-statement"))]),Var("wrappedStatements"))))),RDefNoArgs("unwrap-statement",RuleNoCond(NoAnnoList(Op("StatementLine",[Var("statement")])),Var("statement"))),SDef("map",[DefaultVarDec("s")],Rec("x",Choice(ListCongNoTail([]),ListCong([CallNoArgs(SVar("s"))],CallNoArgs(SVar("x")))))),SDef("mapconcat",[DefaultVarDec("s")],Call(SVar("foldr"),[ListCongNoTail([]),CallNoArgs(SVar("conc")),CallNoArgs(SVar("s"))])),SDefNoArgs("conc",LChoice(LRule(RuleNoCond(NoAnnoList(Tuple([Var("l1"),Var("l2")])),App(Call(SVar("at-end"),[Build(Var("l2"))]),Var("l1")))),LRule(RuleNoCond(NoAnnoList(Explode(NoAnnoList(Str("\"\"")),Var("xs"))),App(CallNoArgs(SVar("concat")),Var("xs")))))),SDef("at-end",[DefaultVarDec("s")],Rec("x",Choice(ListCong([Id],CallNoArgs(SVar("x"))),Seq(ListCongNoTail([]),CallNoArgs(SVar("s")))))),SDefNoArgs("concat",Rec("x",Choice(ListCongNoTail([]),LRule(RuleNoCond(NoAnnoList(ListTail([Var("l")],Var("ls"))),App(Call(SVar("at-end"),[BA(CallNoArgs(SVar("x")),Var("ls"))]),Var("l"))))))),SDef("collect-all",[DefaultVarDec("s")],Call(SVar("collect-all"),[CallNoArgs(SVar("s")),CallNoArgs(SVar("union"))])),SDef("collect-all",[DefaultVarDec("s"),DefaultVarDec("un")],Rec("x",LChoice(Build(NoAnnoList(ListTail([RootApp(CallNoArgs(SVar("s")))],RootApp(Call(SVar("crush"),[Build(NoAnnoList(List([]))),CallNoArgs(SVar("un")),CallNoArgs(SVar("x"))]))))),Call(SVar("crush"),[Build(NoAnnoList(List([]))),CallNoArgs(SVar("un")),CallNoArgs(SVar("x"))])))),SDef("collect-all",[DefaultVarDec("s"),DefaultVarDec("un"),DefaultVarDec("reduce")],Rec("x",LChoice(Build(NoAnnoList(ListTail([RootApp(CallNoArgs(SVar("s")))],RootApp(Call(SVar("crush"),[Build(NoAnnoList(List([]))),CallNoArgs(SVar("un")),CallNoArgs(SVar("x"))]))))),LChoice(Seq(CallNoArgs(SVar("reduce")),CallNoArgs(SVar("x"))),Call(SVar("crush"),[Build(NoAnnoList(List([]))),CallNoArgs(SVar("un")),CallNoArgs(SVar("x"))]))))),SDef("collect-om",[DefaultVarDec("s")],Call(SVar("collect-om"),[CallNoArgs(SVar("s")),CallNoArgs(SVar("union"))])),SDef("collect-om",[DefaultVarDec("s"),DefaultVarDec("op")],LChoice(Build(NoAnnoList(List([RootApp(CallNoArgs(SVar("s")))]))),Call(SVar("crush"),[Build(NoAnnoList(List([]))),CallNoArgs(SVar("op")),Call(SVar("collect-om"),[CallNoArgs(SVar("s")),CallNoArgs(SVar("op"))])]))),SDef("collect-om",[DefaultVarDec("s"),DefaultVarDec("un"),DefaultVarDec("skip")],Rec("x",LChoice(Build(NoAnnoList(List([RootApp(CallNoArgs(SVar("s")))]))),LChoice(Seq(CallNoArgs(SVar("skip")),Call(SVar("crush"),[Build(NoAnnoList(List([]))),CallNoArgs(SVar("un")),CallNoArgs(SVar("x"))])),Call(SVar("crush"),[Build(NoAnnoList(List([]))),CallNoArgs(SVar("un")),CallNoArgs(SVar("x"))]))))),RDef("crush",[DefaultVarDec("nul"),DefaultVarDec("sum"),DefaultVarDec("s")],RuleNoCond(NoAnnoList(Explode(Wld,Var("xs"))),App(Call(SVar("foldr"),[CallNoArgs(SVar("nul")),CallNoArgs(SVar("sum")),CallNoArgs(SVar("s"))]),Var("xs")))),SDef("foldr",[DefaultVarDec("s1"),DefaultVarDec("s2"),DefaultVarDec("f")],Choice(Seq(ListCongNoTail([]),CallNoArgs(SVar("s1"))),LRule(RuleNoCond(NoAnnoList(ListTail([Var("y")],Var("ys"))),App(CallNoArgs(SVar("s2")),NoAnnoList(Tuple([App(CallNoArgs(SVar("f")),Var("y")),App(Call(SVar("foldr"),[CallNoArgs(SVar("s1")),CallNoArgs(SVar("s2")),CallNoArgs(SVar("f"))]),Var("ys"))]))))))),RDefNoArgs("union",RuleNoCond(NoAnnoList(Tuple([Var("l1"),Var("l2")])),App(Rec("x",LChoice(Seq(ListCongNoTail([]),Build(Var("l2"))),LChoice(Seq(Call(SVar("HdMember"),[Build(Var("l2"))]),CallNoArgs(SVar("x"))),ListCong([Id],CallNoArgs(SVar("x")))))),Var("l1")))),RDef("HdMember",[DefaultVarDec("mklst")],Rule(NoAnnoList(ListTail([Var("x")],Var("xs"))),Var("xs"),Seq(CallNoArgs(SVar("mklst")),Call(SVar("fetch"),[LRule(RuleNoCond(Var("y"),App(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("x"),Var("y")])))))])))),SDef("fetch",[DefaultVarDec("s")],Rec("x",LChoice(ListCong([CallNoArgs(SVar("s"))],Id),ListCong([Id],CallNoArgs(SVar("x")))))),SDefNoArgs("eq",Match(NoAnnoList(Tuple([Var("x"),Var("x")])))),SDef("oncetd",[DefaultVarDec("s")],Rec("x",LChoice(CallNoArgs(SVar("s")),One(CallNoArgs(SVar("x")))))),SDef("genzip",[DefaultVarDec("a"),DefaultVarDec("b"),DefaultVarDec("c"),DefaultVarDec("s")],Rec("x",Choice(CallNoArgs(SVar("a")),Seq(CallNoArgs(SVar("b")),Seq(TupleCong(CallNoArgs(SVar("s")),[CallNoArgs(SVar("x"))]),CallNoArgs(SVar("c"))))))),SDefNoArgs("zip",Call(SVar("zip"),[Id])),SDef("zip",[DefaultVarDec("s")],Call(SVar("genzip"),[CallNoArgs(SVar("Zip1")),CallNoArgs(SVar("Zip2")),CallNoArgs(SVar("Zip3")),CallNoArgs(SVar("s"))])),RDefNoArgs("Zip1",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(List([])),NoAnnoList(List([]))])),NoAnnoList(List([])))),RDefNoArgs("Zip2",RuleNoCond(NoAnnoList(Tuple([NoAnnoList(ListTail([Var("x")],Var("xs"))),NoAnnoList(ListTail([Var("y")],Var("ys")))])),NoAnnoList(Tuple([NoAnnoList(Tuple([Var("x"),Var("y")])),NoAnnoList(Tuple([Var("xs"),Var("ys")]))])))),RDefNoArgs("Zip3",RuleNoCond(NoAnnoList(Tuple([Var("x"),Var("xs")])),NoAnnoList(ListTail([Var("x")],Var("xs"))))),RDefNoArgs("Fst",RuleNoCond(NoAnnoList(Explode(NoAnnoList(Str("\"\"")),NoAnnoList(ListTail([Var("x")],Var("xs"))))),Var("x"))),RDefNoArgs("Snd",RuleNoCond(NoAnnoList(Explode(NoAnnoList(Str("\"\"")),NoAnnoList(ListTail([Var("x"),Var("y")],Var("xs"))))),Var("y"))),SDefNoArgs("flatten-list",Call(SVar("foldr"),[Build(NoAnnoList(List([]))),GuardedLChoice(TupleCong(CallNoArgs(SVar("is-list")),[Id]),CallNoArgs(SVar("conc")),CallNoArgs(SVar("MkCons"))),GuardedLChoice(CallNoArgs(SVar("is-list")),CallNoArgs(SVar("flatten-list")),Id)])),SDefNoArgs("is-list",Choice(Match(NoAnnoList(List([]))),Match(NoAnnoList(ListTail([Wld],Wld))))),RDefNoArgs("MkCons",RuleNoCond(NoAnnoList(Tuple([Var("x"),Var("xs")])),NoAnnoList(ListTail([Var("x")],Var("xs"))))),SDefT("equal",[],[DefaultVarDec("x"),DefaultVarDec("y")],Where(AM(Build(Var("x")),Var("y")))),RDefNoArgs("double-quote",RuleNoCond(Var("s"),App(CallNoArgs(SVar("strcat")),NoAnnoList(Tuple([App(CallNoArgs(SVar("strcat")),NoAnnoList(Tuple([NoAnnoList(Str("\"\\\"\"")),Var("s")]))),NoAnnoList(Str("\"\\\"\""))]))))),SDefNoArgs("separate-by",Seq(Match(NoAnnoList(Tuple([Var("sep"),RootApp(Id)]))),CallT(SVar("separate-by"),[],[Var("sep")]))),SDef("separate-by",[DefaultVarDec("sep")],CallT(SVar("separate-by"),[],[App(CallNoArgs(SVar("sep")),NoAnnoList(Tuple([])))])),SDefT("separate-by",[],[DefaultVarDec("sep")],Choice(ListCongNoTail([]),ListCong([Id],Rec("x",Choice(ListCongNoTail([]),Seq(ListCong([Id],CallNoArgs(SVar("x"))),Build(NoAnnoList(ListTail([Var("sep")],RootApp(Id)))))))))),SDefNoArgs("add-indices",Call(SVar("map-with-index"),[Id])),SDefNoArgs("inc",BA(CallNoArgs(SVar("add")),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(Int("1"))])))),SDefT("nmap",[VarDec("s",FunType([ConstType(SortNoArgs("Int")),ConstType(SortVar("a"))],ConstType(SortVar("b"))))],[DefaultVarDec("i")],Choice(ListCongNoTail([]),ListCong([CallT(SVar("s"),[],[Var("i")])],CallT(SVar("nmap"),[CallNoArgs(SVar("s"))],[App(CallNoArgs(SVar("inc")),Var("i"))])))),SDef("map-with-index",[DefaultVarDec("s")],Let([SDefT("apply",[],[DefaultVarDec("i")],BA(CallNoArgs(SVar("s")),NoAnnoList(Tuple([Var("i"),RootApp(Id)]))))],CallT(SVar("nmap"),[CallNoArgs(SVar("apply"))],[NoAnnoList(Int("1"))]))),SDefNoArgs("int-dec",CallT(SVar("int-subt"),[],[NoAnnoList(Int("1"))])),SDefT("int-subt",[],[DefaultVarDec("y")],Seq(Match(Var("x")),Prim("\"SSL_subti\"",[Var("x"),Var("y")]))),SDef("topdown",[DefaultVarDec("s")],Seq(CallNoArgs(SVar("s")),All(Call(SVar("topdown"),[CallNoArgs(SVar("s"))])))),SDef("try",[DefaultVarDec("s")],LChoice(CallNoArgs(SVar("s")),Id)),SDefNoArgs("newname",Seq(Match(Var("prefix")),Prim("\"SSL_newname\"",[Var("prefix")]))),SDefNoArgs("strcat",Seq(Match(NoAnnoList(Tuple([Var("str1"),Var("str2")]))),Prim("\"SSL_strcat\"",[Var("str1"),Var("str2")]))),SDefNoArgs("length",Seq(Match(Var("t")),Prim("\"SSL_get_list_length\"",[Var("t")]))),SDefNoArgs("gt",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),Test(LChoice(Prim("\"SSL_gti\"",[Var("x"),Var("y")]),Prim("\"SSL_gtr\"",[Var("x"),Var("y")]))))),SDefNoArgs("add",Seq(Match(NoAnnoList(Tuple([Var("x"),Var("y")]))),LChoice(Prim("\"SSL_addi\"",[Var("x"),Var("y")]),Prim("\"SSL_addr\"",[Var("x"),Var("y")])))),SDefNoArgs("int-to-string",Seq(Match(Var("x")),Prim("\"SSL_int_to_string\"",[Var("x")])))])])